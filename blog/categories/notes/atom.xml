<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notes | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-23T10:13:34-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes From Messing Around With Processing Tutorials]]></title>
    <link href="http://blog.neauro.com/blog/2011/06/08/notes-from-messing-around-with/"/>
    <updated>2011-06-08T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/06/08/notes-from-messing-around-with</id>
    <content type="html"><![CDATA[<div class='post'>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-RhK-RFQbcGY/TfBC8WD0qyI/AAAAAAAAAQk/pllWCnFCrLM/s1600/processingcircles.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="319" src="http://4.bp.blogspot.com/-RhK-RFQbcGY/TfBC8WD0qyI/AAAAAAAAAQk/pllWCnFCrLM/s320/processingcircles.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">my first great processing creation</td></tr></tbody></table><br />Processing is apparently supposed to allow artists to interface with Java as if it were more of a scripting language, in case Java itself is too scary or complicated.  (It's also meant to allow you to do simple projects without the overhead of all the Java code and learning Java, and is a good gateway programming language.)  Actually, thinking about it now, my first project with Java involving drawing a house, lifting pens and putting them down and changing colors and all.  It was the most frustrating thing ever and I'm glad I stuck with CS anyway.<br /><br />Little bundles of code for Processing are referred to as "sketches." Here is the code in case you want to create a sketch to make tons of circles for yourself.  (It is also Tutorial 1 on the Processing website.)<br /><br /><pre class="brush:jscript">void setup() {<br />  size(480, 120);<br />  smooth();<br />}<br /><br />void draw() {<br />  if (mousePressed) {<br />    fill(0);<br />  } else {<br />    fill(255);<br />  }<br />  ellipse(mouseX, mouseY, 80, 80);<br />}<br /></pre><br />It seems that <code>setup()</code> is called once, when the program starts running; <code>draw()</code> is called constantly, much like an <code>update()</code> function in game programming.  You can also name functions with headers like <code>void mousePressed()</code>, which is a function which would be called every time the mouse is pressed.<br /><br />After you're done coding something with Processing, you can Export it into an applet, or an application for Windows, OSX, or Linux.  You can also just easily save frames by calling <code>saveFrame("name-of-output-picture####.png")</code>, where the hash marks will be replaced with a numbered sequence.<br /><br />Here's sample code that deals with creating a Car object in Processing:<br /><br /><pre class="brush:jscript">Car myCar1;<br />Car myCar2; // Two objects!<br /><br />void setup() {<br />  size(200,200);<br />  // Parameters go inside the parentheses when the object is constructed.<br />  myCar1 = new Car(color(255,0,0),0,100,2); <br />  myCar2 = new Car(color(0,0,255),0,10,1);<br />}<br /><br />void draw() {<br />  background(255);<br />  myCar1.drive();<br />  myCar1.display();<br />  myCar2.drive();<br />  myCar2.display();<br />}<br /><br />// Even though there are multiple objects, we still only need one class. <br />// No matter how many cookies we make, only one cookie cutter is needed.<br />class Car { <br />  color c;<br />  float xpos;<br />  float ypos;<br />  float xspeed;<br /><br />  // The Constructor is defined with arguments.<br />  Car(color tempC, float tempXpos, float tempYpos, float tempXspeed) { <br />    c = tempC;<br />    xpos = tempXpos;<br />    ypos = tempYpos;<br />    xspeed = tempXspeed;<br />  }<br /><br />  void display() {<br />    stroke(0);<br />    fill(c);<br />    rectMode(CENTER);<br />    rect(xpos,ypos,20,10);<br />  }<br /><br />  void drive() {<br />    xpos = xpos + xspeed;<br />    if (xpos &gt; width) {<br />      xpos = 0;<br />    }<br />  }<br />}<br /></pre><br />And here's an example of grabbing samples of color from an image:<br /><pre class="brush:jscript">for (int x = 0; x &lt; img.width; x++) {<br />  for (int y = 0; y &lt; img.height; y++ ) {<br />    // Calculate the 1D pixel location<br />    int loc = x + y*img.width;<br />    // Get the R,G,B values from image<br />    float r = red   (img.pixels[loc]);<br />    float g = green (img.pixels[loc]);<br />    float b = blue  (img.pixels[loc]);<br />    // Change brightness according to the mouse here<br />    float adjustBrightness = ((float) mouseX / width) * 8.0;<br />    r *= adjustBrightness;<br />    g *= adjustBrightness;<br />    b *= adjustBrightness;<br />    // Constrain RGB to between 0-255<br />    r = constrain(r,0,255);<br />    g = constrain(g,0,255);<br />    b = constrain(b,0,255);<br />    // Make a new color and set pixel in the window<br />    color c = color(r,g,b);<br />    pixels[loc] = c;<br />  }<br />}<br /></pre>Other miscellaneous notes: <br /><ul><li><code>width</code> and <code>height</code> are variables which refer to the size of the sketch</li><li><code>size(x, y, option)</code> will create a sketch of width x and height y, with an optional rendering mode.  The default is <code>JAVA2D</code>, which does high-quality 2D graphics at the expense of speed.  <code>P2D</code> refers to Processing 2D, which has simple graphics and fast pixel operations, so it's good if you need to do thousands of shapes.  <code>P3D</code> (Processing 3D renderer) can produce 3D graphics even without the use of a library, and is meant for speed and pixel operations.  <code>OPENGL</code> mixes use of Sun's Java for OpenGL library for faster rendering, and Processing's APIs for application export (for which the <code>P3D</code> renderer is a simpler solution, if you don't want your users to see the whole "Are you sure you want to trust Sun Microsystems" dialog).  Finally, <code>size(x, y, PDF, "pdf-name.pdf")</code> will draw to a file rather than a screen.</li><li>You can load images easily in Processing, but it takes a while, so it's best to do it only once; i.e. not in <code>draw()</code> but in <code>setup()</code>.<br /></li></ul><br /><br />Sources: <br /><ul><li><a href="http://processing.org/learning/gettingstarted/">Processing: Getting Started</a></li><li><a href="http://processing.org/learning/overview/">Processing: Processing Overview</a></li><li><a href="http://processing.org/learning/objects/">Processing: Object Oriented Programming</a></li><li><a href="http://processing.org/learning/pixels/">Processing: Images &amp; Pixels</a></li></ul></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating Systems: System Calls and I/O]]></title>
    <link href="http://blog.neauro.com/blog/2011/03/04/operating-systems-system-calls-and-io/"/>
    <updated>2011-03-04T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/03/04/operating-systems-system-calls-and-io</id>
    <content type="html"><![CDATA[<div class='post'>
Okay so, applications go through the operating system to obtain data from the disk, using system calls.  There are a couple types of system calls.<br /><br />When an application makes a <strong>blocking system call</strong>, the application stops executing, and moves into the operating system's wait queue.  When the system call completes, the application gets placed back to the run queue, and when it's ready to execute, it gets the response back from the completed system call.  Most operating systems use blocking system calls because blocking application code is easier to understand.<br /><br />But some user-side processes need non-blocking I/O and so make <strong>non-blocking system calls</strong>, a good example of which are human-interface devices: i.e. the mouse, the keyboard.  Input has to be taken and used, and can't be delayed until later.  When an operating system supports non-blocking system calls, a call doesn't stop execution of the application, but rather returns quickly, indicating how much data that it was able to read immediately.<br /><br />One way that a programmer can deal with overlapping execution of code and I/O is to write a multi-threaded application, so that some threads can do blocking system calls while others execute code.<br /><br />An alternative to non-blocking system calls are <strong>asynchronous system calls</strong>, which also return immediately, and allow the application to continue executing code.  Later, when the I/O finishes, the application is notified via some shared variable or a call-back routine or an interrupt.  The main difference is that with a non-blocking system call, the immediate return contains whatever data it was able to read immediately, whereas an asynchronous system call will eventually finish reading everything it was supposed to and return that data later.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating Systems: File Systems, Journaling File Systems]]></title>
    <link href="http://blog.neauro.com/blog/2011/03/04/operating-systems-file-systems/"/>
    <updated>2011-03-04T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/03/04/operating-systems-file-systems</id>
    <content type="html"><![CDATA[<div class='post'>
It's Thursday night/Friday morning, which means it's time to cram-study for the OS quiz tomorrow!  <span class="shh">This cram session brought to you by coke obtained at a Rails party at Joshu's place.</span><br /><br /><br /><span class="sig">File Systems</span><br />So we've most recently gone over file system stuff, <a href="http://nuubu.blogspot.com/2011/02/operating-system-notes-fat-file-system.html">a little bit</a> of which I've talked about (mostly FAT file systems.)<br /><br />File system in general have a couple simple roles:<ul><li>they implement an abstraction (files/directories) for storage of data</li><li>they logically organize files (i.e. into a hierarchy of directories)</li><li>they allow people to share data (in terms of access control, consistency)</li></ul><br />A <strong>file</strong> is basically just a collection of data which also has certain properties (i.e. size, owner, last modified date, etc.) Files also have "types" which allow them to be understood by the file system or by other programs -- i.e., a file can be a .txt, or an .exe, or a directory, which is actually just a generic "file" which contains a list of other files.  Types are encoded in a file's extension.<br /><br />Some file systems allow applications to access data in different ways -- i.e. sequentially (reading bytes one at a time), or by direct access (giving the application a block/byte number), or by indexed access (like a database), etc.<br /><br />Given some path name, like <code>C:\one\two\three</code>, the file system will access that folder first by opening <code>C:</code>, then searching for <code>one\</code>, then opening <code>one\</code>, then searching for <code>two\</code>, then opening <code>two\</code>...basically the file system spends a lot of time walking down directory paths, which is why "open" is usually a separate function from "read/write."  To make directory crawling go faster, the file system will cache some prefix lookups, like <code>C:\Windows</code>.<br /><br />File systems also have the happy job of implementing a protection system for its files, either by controlling who can access a file, or by controlling by whom a file is accessed.  Some models for representing protection are<ul><li><strong>access control lists (ACLs)</strong>, in which each object knows what user can do what with it, and</li><li><strong>capabilities</strong>, in which each user knows what they can do with each object.</li></ul><br />Capabilities can be handed off, which makes sharing easier; but ACLs are easier to manage, since you can just have a file and say, "This is system32, <em>no one write to this ever</em>."  ACLs can grow pretty large when an object is heavily shared between a lot of users, though they can be simplified by categorizing the users into "groups" (i.e. an object knows it can be altered by admins, but only read by normal users).<br /><br /><br /><span class="sig">Disks</span><br />So the file system goes on top of the disk, which has all dat memorys.  Disks are always divided into five parts:<ol><li>boot block, which contains information to boot the system</li><li>superblock, which specified boundaries of next areas and contains head of freelists of inodes and file blocks</li><li>i-node area, which contains descriptors for each file on disk</li><li>file contents area, the head of which is in the super-block, and the</li><li>swap area, which holds processes which have been swapped out of memory.</li></ol><br />An i-node is a data structure traditional to a Unix-style file system, and basically stores all the information about a regular file, directory, or file system object, other than its data and name.  Each file in a file system correspondes to one i-node.  I-nodes also contain a "block list," in the form of 13 block pointers, 10 of which are "direct pointers" to a block of data corresponding to a file.  The last 3 are pointers to pointers.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-_-IcQmBgdJQ/TXCzs3P_nAI/AAAAAAAAAJU/1kKKk4i5l4E/s1600/inodes.jpg" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="174" width="320" src="http://1.bp.blogspot.com/-_-IcQmBgdJQ/TXCzs3P_nAI/AAAAAAAAAJU/1kKKk4i5l4E/s320/inodes.jpg" /></a></div><br />I-nodes and file blocks are both cached in memory, only forced to be written to disk when the command "sync" is called by the operating system (every couple seconds).  If the computer crashes or has a power failure (i.e. you get frustrated with your computer and do a hard reset), you can have an inconsistent disk.  So, avoid hard resets!<br /><br />To make sure flat file systems are consistent, ask yourself: Does each block belong precisely to one file, or else is it free?  If you're looking at the consistency of a directory structure, do all the directories form a tree, and do the number of inodes equal the number of directories you'll find if you start crawling through all of them?<br /><br /><br /><br /><span class="sig">Journaling File Systems</span><br />So in light of the fact that crashes can and probably will happen when something is being written to disk, how do you make sure stuff stays consistent?  Here is where OS takes a lot of ideas from databases, specifically, atomicity and logs.  <strong>Atomicity</strong> is when you ensure that an action/set of actions are executed completely and perfectly, or else not at all.  <strong>Logs</strong> are a record of the actions that you've done to date.<br /><br /><strong>Journaling file systems</strong> are a special (yet dated to the 80s) type of file system which takes a advantage of redo logs.  The general idea is:<ul><li>always have a "home copy" of your data in a consistent/up-to-date state</li><li>make updates persistent by writing them in order to a "journal" partition or file on disk</li><li>at your leisure, push updates to the home copies to free up space in the journal</li><li>make sure that you've written a record of your action to your log before updating the disk</li></ul><br />Once an action/transaction has been "committed" to the log, you know for sure that you want it on disk.  So, if you crash, recover your log and redo all of the actions that you did there.  This fixes the problem that you might have committed something -- i.e. intended to write it to the disk -- but ran into a problem before you were actually able to write to disk.  Redo logs are the easiest type of log to implement.  <br /><br />Once you've got a log of your "committed" data, you can have another thread walk through it and flush items to disk.  Once an item has been flushed, it can be deleted from the log.<br /><br />The problem with the log is that it's one, big contiguous write -- so though it's efficient, it is another I/O, so it's really costly performance-wise.  Thus, journaling file systems can improve performance and make recovery really efficient, but isn't worth it in a really busy system.<br /><br /><br /><br />Sources:<br />lecture 14 notes<br />Wikipedia: <a href="http://en.wikipedia.org/wiki/I-node">inode</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating Systems: Symbol Files, Kernel Debugging]]></title>
    <link href="http://blog.neauro.com/blog/2011/02/28/operating-systems-symbol-files-kernel/"/>
    <updated>2011-02-28T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/02/28/operating-systems-symbol-files-kernel</id>
    <content type="html"><![CDATA[<div class='post'>
I'm working on the last OS project, using windbg, and the kernel keeps crashing due to something that looks like<br /><br /><pre class="brush:cpp">*** ERROR: Module load completed but symbols could not be loaded for mssmbios.sys<br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for fltmgr.sys - <br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for SHELL32.dll - <br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for USER32.dll - <br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for COMCTL32.dll - <br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for comdlg32.dll - <br />*** ERROR: Module load completed but symbols could not be loaded for NOTEPAD.EXE<br />*** ERROR: Symbol file could not be found.  Defaulted to export symbols for kernel32.dll - <br />Probably caused by : fltmgr.sys ( fltmgr!FltProcessFileLock+2049 )<br /></pre><br />I had trouble with symbol files in my previous OS project so finally decided to look them up.<br /><br />A symbol file contains debugging information, which is normally stored separate from the compiled executable to limit the size of the executable, as well as to save disk storage and reduce the time it takes to load the data.  This also makes it so that an executable can be distributed without some essential information which would make it easier for people to reverse engineer it.  Another thing that keeping debugging information separate allowed was to allow incremental linking of debug versions of programs; since the linker and integrated debugger could now use separate PDBs during debugging, the linker has less work to do.<br /><br />Concerning all modern Microsoft compilers (Visual C++ 1.0 and later), that separate file for the debugging information is called a <i>program database</i> (.pdb) file.  PDB files are created when an executable is built, given you've directed your build tools appropriately.<br /><br />In this case, the symbol file for some module couldn't be found, which means what caused the crash was third-party software that didn't have its symbols listed in a PDB.  If you had a crash, you can type <code>!analyze -v</code> in the kernel debugger window, which will show you a lot of verbose information, including the contents of the stack.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="https://lh6.googleusercontent.com/-kIaAvrF3BzM/TWxT24ESLPI/AAAAAAAAAI8/2OtdPaREX-M/s1600/kernelverbose.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="400" src="https://lh6.googleusercontent.com/-kIaAvrF3BzM/TWxT24ESLPI/AAAAAAAAAI8/2OtdPaREX-M/s400/kernelverbose.png" width="387" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">oh, look.&nbsp; the stack</td></tr></tbody></table><br />I've underlined the names of the modules in the stack in red.  To find out more information about a module, you can type <code>lmvs <i>moduleName</i></code>, where <code><i>moduleName</i></code> is the name of the module.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-V4DFp7WLtYE/TWxUz03FKfI/AAAAAAAAAJE/GSTiQBfaVM8/s1600/kernelverbose2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="155" src="http://3.bp.blogspot.com/-V4DFp7WLtYE/TWxUz03FKfI/AAAAAAAAAJE/GSTiQBfaVM8/s320/kernelverbose2.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">cool story, bro</td></tr></tbody></table><br /><br /><br />Sources:<br /><a href="http://msdn.microsoft.com/en-us/library/aa363368%28v=vs.85%29.aspx">MSDN: Symbol Files</a><br /><a href="http://support.microsoft.com/kb/121366">Microsoft Support: Description of the .PDB files and of the .DBG files</a><br /><a href="http://blogs.technet.com/b/askperf/archive/2007/05/29/basic-debugging-of-an-application-crash.aspx">TechNet: Basic Debugging of an Application Crash</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operating System Notes: FAT File System]]></title>
    <link href="http://blog.neauro.com/blog/2011/02/25/operating-system-notes-fat-file-system/"/>
    <updated>2011-02-25T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/02/25/operating-system-notes-fat-file-system</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="sig">Disk Geometry Definitions</span><br />So now we're learning about disks (which I always end up spelling as "discs" somehow) as well as file systems.<br /><br />Some pertinent disk parts (which I always forget the definition of):<ul><li>the disk's data is stored on concentric bands called <strong>tracks</strong>; tracks are more densely populated with data at the center of the disk than on the other edges (to ensure that a <strike>discked</strike> fixed amount of data can be read in a constant time, despite disk surface speed moving fast on the outer tracks)</li><li>tracks are divided into sections called <strong>sectors</strong>, which are the smallest unit of physical storage on the disk; the data size of a sector is always a power of two, and almost always 512 bytes</li><li>a <strong>cluster</strong> is what the Windows NT file systems use to allocate storage; a cluster is one or more contiguous sectors.</li></ul><br />As a file is written to the disk, the file system decides the appropriate number of clusters needed to store the file's data.  For instance, if each cluster is 512 bytes and the file being written is 800 bytes, then two clusters are allocated for the file.  If the file size changes later, then more clusters are allocated to that file.<br /><br /><br /><br /><span class="sig">One type of file system: File Allocation Table (FAT)</span><br />So, a file system is a method of storing and organizing files and data on a computer.  Essentially, a file system organizes the files into a database so that the operating system can organize, manipulate, and retrieve them.<br /><br />Some basic differences (between FAT and NTFS file systems):<ul><li>The FAT file system can only use 16 bits for the cluster number, which means that volumes using the FAT format of file system can be larger than 65,535 sectors</li><li>Because of the overhead in the FAT file system, it's not good for volumes larger than 511 MB (wait, isn't this...all volumes nowadays?;;)</li><li>FAT is a better choice than NTFS for volumes that are smaller than ~400-500 MBs though, because of the disk overhead in NTFS.  I guess that's the tradeoff</li><li>FAT file systems can be used with operating systems other than Windows NT, i.e. Windows 95, MS-DOS, etc.</li><li>FAT is simpler</li><li>FAT folder size is smaller for an equal number of files</li><li>FAT has no controls regarding whether a user can access a file or folder, which means the system doesn't need to check permissions for an individual file or user, to see if the user has access to the file.  But Windows NT operating systems will have to check if a file is read-only anyway, whether it's FAT or NTFS, which is why FAT may provide faster access to files in this respect</li></ul><br />FAT is a simple file system that was originally designed for small disks and simple folder structures. A FAT-formatted volume is allocated in clusters, the size of which is determined by the size of the volume, which must fit in 16 bits and must be a power of 2.<br /><br />FAT is named for the file allocation table, which lives at the beginning of a FAT-formatted volume.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-jw8lKfAxw60/TWX-0tUJQVI/AAAAAAAAAIs/9T9URTfof_c/s1600/FATvolume.jpg" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="62" width="320" src="http://3.bp.blogspot.com/-jw8lKfAxw60/TWX-0tUJQVI/AAAAAAAAAIs/9T9URTfof_c/s320/FATvolume.jpg" /></a></div><br />What do all of these areas do?  <strong>FAT1</strong> and <strong>FAT2</strong> contain the file allocation table, which contains information about a cluster on the volume, specifically whether that cluster is:<ul><li>unused</li><li>a cluster in use by a file</li><li>a bad cluster</li><li>the last cluster in a file</li></ul><br />The <strong>root folder</strong> contains an entry for each file and folder on the root.  The only difference between the root folder and other folders is that the root folder is in a specified location on the disk, and has a fixed size.  (On a hard disk, the size is 512 entries; on a floppy disk, it depends on the size of the floppy.)<br /><br />For every file and folder contained in a folder (as directories are really just a special type of file), there is a 32-byte entry, which contains the following information:<ul><li>name (eight-plus-three characters)</li><li>attribute byte (8 bits)</li><li>create time (24 bits)</li><li>create date (16 bits)</li><li>last access date (16 bits)</li><li>last modified time (16 bits)</li><li>last modified date (16 bits)</li><li>starting cluster number in the file allocation table (16 bits)</li><li>file size (32 bits)</li></ul><br />As for the FAT folder structure, there is no real organization -- when a new file comes in, it is placed in the first available location on the volume.  The "<strong>starting cluster number</strong>" is the address of the first cluster used by the file.  Each cluster points to the next cluster used in the file, or else to a terminating cluster that signals the end of the file.<br /><br />Since all entries in a folder are the same size, the <strong>attribute byte</strong> for each entry in a folder describes what kind of entry it is: one bit indicating that it's a subfolder, another bit marking the entry as a volume label, etc.  The OS controls the settings of these bits.  The user can control four other attribute bits, which indicate the entry is an archive file, system file, hidden file, and/or read-only file.<br /><br /><br /><br />More later.<br /><br /><br />Sources:<br />Microsoft TechNet: <a href="http://technet.microsoft.com/en-us/library/cc750198.aspx">Disk and File System Basics</a>, <a href="http://technet.microsoft.com/en-us/library/cc750355.aspx">Choosing a File System</a><br />Wikipedia: <a href="http://en.wikipedia.org/wiki/File_system">File system</a></div>

]]></content>
  </entry>
  
</feed>
