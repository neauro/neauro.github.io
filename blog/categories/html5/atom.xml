<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Html5 | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-01-13T19:51:07-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pong]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/22/pong/"/>
    <updated>2012-08-22T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/22/pong</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-eIQZzcRHBoE/UDVb_WiTvVI/AAAAAAAACTc/TFLyM5mSpvc/s1600/pongu.jpg" imageanchor="1"><img border="0" height="286" src="http://4.bp.blogspot.com/-eIQZzcRHBoE/UDVb_WiTvVI/AAAAAAAACTc/TFLyM5mSpvc/s400/pongu.jpg" width="400" /></a></div><br />I've been working on a simple Pong game, to elaborate on <a href="http://nuubu.blogspot.com/2012/08/some-html5javascript-links.html">the stuff I learned a couple days ago</a>.<br /><br />Insidiously small bugs learned about thus far include this: if your JavaScript file loads before you make a <code>canvas</code> object in HTML, it won't know about <code>canvas</code>. For example, the following is wrong:<br /><br /><pre class="brush: html"><script src="game.js"></script> <!-- "WHERE IS #CANVAS" --><br /><canvas id="canvas"></canvas><br /></pre><br />In trying to do collision stuff, I also ran into a curious problem where the following did not work:<br /><br /><pre class="brush: js">if ( ((that.X-that.radius) &lt;= (player.X+player.width)) &amp;&amp;<br />(that.Y &gt;= player.Y) &amp;&amp;<br />(that.Y &lt; (player.y+player.height)))<br />collided = PADDLE;<br /></pre><br />But this <em>did</em>:<br /><br /><pre class="brush: js">var hit_paddle_side = beneath_paddle_top = above_paddle_bottom = false;<br /><br />if (((that.X-that.radius) &lt;= (player.X+player.width))) hit_paddle_side = true;                 if ((that.Y &gt;= player.Y)) beneath_paddle_top = true;<br />if ((that.Y &lt; (player.Y+player.height))) above_paddle_bottom = true;<br /><br />if (hit_paddle_side &amp;&amp; beneath_paddle_top &amp;&amp; above_paddle_bottom)<br />    collided = PADDLE;<br /></pre><br />Not sure why yet.<br /><br />All the code is <a href="https://github.com/neauro/html5pong">on my Github</a> for now.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some HTML5/JavaScript Links]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links/"/>
    <updated>2012-08-16T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links</id>
    <content type="html"><![CDATA[<div class='post'>
Having done few HTML5 things, I've dug up some tutorials and interesting links.<br /><br /><br /><h2><a href="http://dev.opera.com/articles/view/html-5-canvas-the-basics/">HTML5 canvas - the basics</a></h2>I guess the first cool thing about HTML5 is this canvas thing, which is basically like a drawing pad that HTML5 bestows upon you, eyes glowing with love. "Go," it says. "Use this to create art with your present armory of JavaScript."<br /><br />A canvas object has a bunch of contexts, the same way a drawing pad has a lot of pages. JavaScript can be used to draw onto a context. Most browsers allow JavaScript to draw 2D things; some have experimental 3D contexts.<br /><br />Unlike a drawing pad, once you've decided to use a canvas's context, <i>that's the only context you can use for that canvas, ever</i>. It's kind of like you tore out a page from the drawing pad and all the other ones withered away in anguish.<br /><br />Interesting things canvases can do in HTML5:<br /><ul><li>draw lines, ex. <code>canvas.lineTo(xPos, yPos)</code></li><li>draw rectangles, ex. <code>canvas.fillRect(xPos,yPos,width,height)</code></li><li>draw images, ex. <code>canvas.drawImage(imgSource, xPos,yPos)</code></li><li>apply pixel manipulations to those images, ex. invert all colors</li><li>draw text (only in recent WebKit builds)</li><li>draw dropshadows and gradients for all your Web 2.0 needs</li></ul><br /><br /><h2><a href="http://html5.litten.com/understanding-save-and-restore-for-the-canvas-context/">Understanding save() and restore() for the Canvas Context</a></h2>When searching around for examples of canvas usage, I saw references to <code>canvas.save()</code> and <code>canvas.restore()</code> which were nicely explained in this article.<br /><br />In brief, every canvas contains a stack of "drawing states." Drawing states are comprised of a lot of data, including the current transformation region, the current width of line being drawn, the current front, and so on.<br /><br />If you want to draw a shape like a diamond (or rotated square), the steps to do this involve:<br /><ol><li>Make a canvas, retrieve its 2D context</li><li>2Dcontext.save()</li><li>Rotate the context</li><li>Draw a square on the context (which, since the canvas is rotated, will be diamond-shaped)</li></ol>If you then wanted to draw a new shape, like a regular square, you could easily pop the present drawing state with <code>2Dcontext.restore()</code> to get back to an un-rotated coordinate system. The diamond should stay the way that it is presently.<br /><br />Similarly, objects on a canvas can't be "just moved;" if you're translating an object across the canvas, the steps go<br /><ol><li>Clear the canvas</li><li>Draw the object in its new position</li><li>Repeat</li></ol><br /><br /><h2>HTML5: Writing a game, by Jason Croucher</h2>The blogging process of someone creating a Breakaway-type game in HTML5 and JavaScript. The final product, named Bouncing Animals, is <a href="http://jacebook.co.uk/share/html5/">here</a>. It's not really a tutorial, but I found it to be a good/simple primer.<br /><br /><ul><li><a href="http://jacebook.co.uk/blog/2010/09/11/html5-writing-a-game/">Part 1</a>&nbsp;involves: creating an HTML5 canvas, adding and drawing/playing images and sounds, how to make an event handler for a button and mouse, and starting/stopping a game.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s1600/bear1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="290" src="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s400/bear1.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">getting exciting yet?</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step2/">Part 2</a>&nbsp;involves making the mushroom "wobble" between two pngs (one normal-sized, one slightly flattened) whenever it's hit by the bear.</li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step-3/">Part 3</a>&nbsp;involves varying the bear's speed and angle.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s1600/bear2.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="232" src="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s320/bear2.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">we gettin wild in here</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/15/html5-writing-a-game-step-4/">Part 4</a>&nbsp;and <a href="http://jacebook.co.uk/blog/2010/09/20/html5-writing-a-game-step-5/">Part 5</a>&nbsp;talk about game objects and optimal FPS numbers for various browsers.</li></ul><div><br /><br /><h2><a href="http://michalbe.blogspot.com/2010/09/simple-game-with-html5-canvas-part-1.html">Tutorial: Simple game with HTML5 Canvas</a></h2></div><div>An actual game tutorial for a Doodle Jump clone that's fairly comprehensive, and involves drawing objects on an HTML5 context, some animations, and so on.<br /><br /><br /><h2>JavaScript function declarations vs. function expressions</h2>In the previous tutorial, I encountered my first instance of a function expression. Essentially, a <strong>function definition</strong> looks like<br /><pre class="brush: js"> function function_name() {<br />   // stuff<br />  }<br /></pre><br />whereas a <strong>function expression</strong> looks like<br /><pre class="brush: js"> var = function function_name() {<br />   // stuff<br />  };<br /></pre></div><br />Some links I found which discussing declarations versus expressions are <a href="http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">Function Declarations vs. Function Expressions</a> and <a href="http://kangax.github.com/nfe/">Named function expressions demystified</a>, and the differences include the following:<br /><br /><ul><li>Function expressions can be named or anonymous.</li><li>Function declarations are parsed and evaluated before any code is executed, whereas function expressions are evaluated at run-time. Therefore, if you call a declared function at any time, it should be okay, whereas function expressions must be defined before being called.</li><li>Function declarations should <i>not</i>&nbsp;be used in if-statements. In contrast, function expressions are okay to call in if-statements, and are sometimes used this way to allow for best performance ("don't define this function unless it's needed").</li><li>Function expressions mimic what JavaScript is <i>actually</i>&nbsp;doing, which is creating an object every time a function is defined.</li></ul><div><br /></div><div>In general it seems that function expressions are the favored creature.</div></div>

]]></content>
  </entry>
  
</feed>
