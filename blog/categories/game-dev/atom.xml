<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Game Dev | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/game-dev/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-18T10:18:09-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pong]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/22/pong/"/>
    <updated>2012-08-22T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/22/pong</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-eIQZzcRHBoE/UDVb_WiTvVI/AAAAAAAACTc/TFLyM5mSpvc/s1600/pongu.jpg" imageanchor="1"><img border="0" height="286" src="http://4.bp.blogspot.com/-eIQZzcRHBoE/UDVb_WiTvVI/AAAAAAAACTc/TFLyM5mSpvc/s400/pongu.jpg" width="400" /></a></div><br />I've been working on a simple Pong game, to elaborate on <a href="http://nuubu.blogspot.com/2012/08/some-html5javascript-links.html">the stuff I learned a couple days ago</a>.<br /><br />Insidiously small bugs learned about thus far include this: if your JavaScript file loads before you make a <code>canvas</code> object in HTML, it won't know about <code>canvas</code>. For example, the following is wrong:<br /><br /><pre class="brush: html"><script src="game.js"></script> <!-- "WHERE IS #CANVAS" --><br /><canvas id="canvas"></canvas><br /></pre><br />In trying to do collision stuff, I also ran into a curious problem where the following did not work:<br /><br /><pre class="brush: js">if ( ((that.X-that.radius) &lt;= (player.X+player.width)) &amp;&amp;<br />(that.Y &gt;= player.Y) &amp;&amp;<br />(that.Y &lt; (player.y+player.height)))<br />collided = PADDLE;<br /></pre><br />But this <em>did</em>:<br /><br /><pre class="brush: js">var hit_paddle_side = beneath_paddle_top = above_paddle_bottom = false;<br /><br />if (((that.X-that.radius) &lt;= (player.X+player.width))) hit_paddle_side = true;                 if ((that.Y &gt;= player.Y)) beneath_paddle_top = true;<br />if ((that.Y &lt; (player.Y+player.height))) above_paddle_bottom = true;<br /><br />if (hit_paddle_side &amp;&amp; beneath_paddle_top &amp;&amp; above_paddle_bottom)<br />    collided = PADDLE;<br /></pre><br />Not sure why yet.<br /><br />All the code is <a href="https://github.com/neauro/html5pong">on my Github</a> for now.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some HTML5/JavaScript Links]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links/"/>
    <updated>2012-08-16T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links</id>
    <content type="html"><![CDATA[<div class='post'>
Having done few HTML5 things, I've dug up some tutorials and interesting links.<br /><br /><br /><h2><a href="http://dev.opera.com/articles/view/html-5-canvas-the-basics/">HTML5 canvas - the basics</a></h2>I guess the first cool thing about HTML5 is this canvas thing, which is basically like a drawing pad that HTML5 bestows upon you, eyes glowing with love. "Go," it says. "Use this to create art with your present armory of JavaScript."<br /><br />A canvas object has a bunch of contexts, the same way a drawing pad has a lot of pages. JavaScript can be used to draw onto a context. Most browsers allow JavaScript to draw 2D things; some have experimental 3D contexts.<br /><br />Unlike a drawing pad, once you've decided to use a canvas's context, <i>that's the only context you can use for that canvas, ever</i>. It's kind of like you tore out a page from the drawing pad and all the other ones withered away in anguish.<br /><br />Interesting things canvases can do in HTML5:<br /><ul><li>draw lines, ex. <code>canvas.lineTo(xPos, yPos)</code></li><li>draw rectangles, ex. <code>canvas.fillRect(xPos,yPos,width,height)</code></li><li>draw images, ex. <code>canvas.drawImage(imgSource, xPos,yPos)</code></li><li>apply pixel manipulations to those images, ex. invert all colors</li><li>draw text (only in recent WebKit builds)</li><li>draw dropshadows and gradients for all your Web 2.0 needs</li></ul><br /><br /><h2><a href="http://html5.litten.com/understanding-save-and-restore-for-the-canvas-context/">Understanding save() and restore() for the Canvas Context</a></h2>When searching around for examples of canvas usage, I saw references to <code>canvas.save()</code> and <code>canvas.restore()</code> which were nicely explained in this article.<br /><br />In brief, every canvas contains a stack of "drawing states." Drawing states are comprised of a lot of data, including the current transformation region, the current width of line being drawn, the current front, and so on.<br /><br />If you want to draw a shape like a diamond (or rotated square), the steps to do this involve:<br /><ol><li>Make a canvas, retrieve its 2D context</li><li>2Dcontext.save()</li><li>Rotate the context</li><li>Draw a square on the context (which, since the canvas is rotated, will be diamond-shaped)</li></ol>If you then wanted to draw a new shape, like a regular square, you could easily pop the present drawing state with <code>2Dcontext.restore()</code> to get back to an un-rotated coordinate system. The diamond should stay the way that it is presently.<br /><br />Similarly, objects on a canvas can't be "just moved;" if you're translating an object across the canvas, the steps go<br /><ol><li>Clear the canvas</li><li>Draw the object in its new position</li><li>Repeat</li></ol><br /><br /><h2>HTML5: Writing a game, by Jason Croucher</h2>The blogging process of someone creating a Breakaway-type game in HTML5 and JavaScript. The final product, named Bouncing Animals, is <a href="http://jacebook.co.uk/share/html5/">here</a>. It's not really a tutorial, but I found it to be a good/simple primer.<br /><br /><ul><li><a href="http://jacebook.co.uk/blog/2010/09/11/html5-writing-a-game/">Part 1</a>&nbsp;involves: creating an HTML5 canvas, adding and drawing/playing images and sounds, how to make an event handler for a button and mouse, and starting/stopping a game.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s1600/bear1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="290" src="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s400/bear1.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">getting exciting yet?</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step2/">Part 2</a>&nbsp;involves making the mushroom "wobble" between two pngs (one normal-sized, one slightly flattened) whenever it's hit by the bear.</li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step-3/">Part 3</a>&nbsp;involves varying the bear's speed and angle.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s1600/bear2.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="232" src="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s320/bear2.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">we gettin wild in here</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/15/html5-writing-a-game-step-4/">Part 4</a>&nbsp;and <a href="http://jacebook.co.uk/blog/2010/09/20/html5-writing-a-game-step-5/">Part 5</a>&nbsp;talk about game objects and optimal FPS numbers for various browsers.</li></ul><div><br /><br /><h2><a href="http://michalbe.blogspot.com/2010/09/simple-game-with-html5-canvas-part-1.html">Tutorial: Simple game with HTML5 Canvas</a></h2></div><div>An actual game tutorial for a Doodle Jump clone that's fairly comprehensive, and involves drawing objects on an HTML5 context, some animations, and so on.<br /><br /><br /><h2>JavaScript function declarations vs. function expressions</h2>In the previous tutorial, I encountered my first instance of a function expression. Essentially, a <strong>function definition</strong> looks like<br /><pre class="brush: js"> function function_name() {<br />   // stuff<br />  }<br /></pre><br />whereas a <strong>function expression</strong> looks like<br /><pre class="brush: js"> var = function function_name() {<br />   // stuff<br />  };<br /></pre></div><br />Some links I found which discussing declarations versus expressions are <a href="http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">Function Declarations vs. Function Expressions</a> and <a href="http://kangax.github.com/nfe/">Named function expressions demystified</a>, and the differences include the following:<br /><br /><ul><li>Function expressions can be named or anonymous.</li><li>Function declarations are parsed and evaluated before any code is executed, whereas function expressions are evaluated at run-time. Therefore, if you call a declared function at any time, it should be okay, whereas function expressions must be defined before being called.</li><li>Function declarations should <i>not</i>&nbsp;be used in if-statements. In contrast, function expressions are okay to call in if-statements, and are sometimes used this way to allow for best performance ("don't define this function unless it's needed").</li><li>Function expressions mimic what JavaScript is <i>actually</i>&nbsp;doing, which is creating an object every time a function is defined.</li></ul><div><br /></div><div>In general it seems that function expressions are the favored creature.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game: Spider]]></title>
    <link href="http://blog.neauro.com/blog/2011/10/13/game-spider/"/>
    <updated>2011-10-13T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/10/13/game-spider</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-AkrTHFgH8Jw/TpcA3TSahXI/AAAAAAAAAeE/b6F-JC3CAIM/s1600/proto1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-AkrTHFgH8Jw/TpcA3TSahXI/AAAAAAAAAeE/b6F-JC3CAIM/s320/proto1.png" width="212" /></a></div><br />My company, Fugazo, was one of the finalists of this year's <a href="http://www.indiecade.com/index.php/2011/Finalists/">Indiecade</a>.  Our CEO and one of the designers attended the conference and were subsequently impressed by the fact that many of the finalists, like Sissy’s Magical Ponycorn Adventure, had been created in one or two days during the <a href="http://arisgames.org/global-game-jam-2011/">2011 Global Game Jam</a>.<br /><br />So, now we're having a company-wide game jam!<br /><br />I don't yet have a "dedicated" programmer on my team, so I'm programming for myself.  I haven't touched Flixel in 4 months but maybe if I hit myself against it hard enough, for for long enough, everything will be just fine.<br /><br />Our theme was "restraint" (a theme from a previous GGJ).  Our game's present working title is just "Spider," and I need to get back to it!<br /><br /><strong>Update:</strong> "Finished" game post is <a href="http://nuubu.blogspot.com/2011/10/game-itsy-bitsy-spider-of-cosmos.html">here</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game: Get Across]]></title>
    <link href="http://blog.neauro.com/blog/2011/06/08/game-get-across/"/>
    <updated>2011-06-08T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/06/08/game-get-across</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s1600/Getacross.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s320/Getacross.png" width="320" /></a></div><br />Yesterday was our last presentation for Games Capstone.  All in all, it was a pretty good quarter -- I've learned a lot about clientside and serverside game programming using Flixel and Player.IO, as well as how to solve (or even better, avoid dealing with) some of the most annoying problems.<br /><br />You can check <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">Get Across on Facebook</a>, and see <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">the other social games</a> on this webpage.<br /><br />First,<br /><br /><h2>An Overview</h2>Get Across is a multiplayer game with tile-based movement.  The objective is to get across (whoa!) a sort of terrain, where different parts of the terrain take more energy to get across, i.e. getting across a mountain takes more energy than getting across a hill, which in turn takes more energy than getting across normal flat ground.  The player can be one of several classes, and each class has its own special abilities: Crafters can get across water by building bridges, Planters can reduce energy usage, Cooks can replenish AP or lure monsters away with Monster Bacon, etc.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s1600/tutorial1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s320/tutorial1.jpg" width="319" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">terrain of the first tutorial</td></tr></tbody></table><br />The idea is that you and your friends could work together to solve boards, and be scored on things such as how long it took you to solve the board together, how much energy and other resources you used, etc.  There could be leaderboards for different teams, and you could also make boards on your own and have your friends "conquer" them.  Each terrain would be kind of like a puzzle that you would be able to solve in different ways, given your different abilities, and different "cards" that you could take into the level, which would have special effects like making mountains explode, or allow players to switch positions with each other, etc.  Like a board game.<br /><br /><br /><h2>Implementation</h2>We -- Ji, Charlie, and myself -- used Flixel, as well as Player.IO for the multiplayer stuff and saving players and states to the database.<br /><br /><br /><h2>Problems</h2>One of them was our thread abortion problem, which arose out of the blue at some point and refused to leave.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s1600/the%2Berror%2Bi%2Bhate.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="180" src="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s320/the%2Berror%2Bi%2Bhate.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">i hate you more than i hate shrimp and scallops</td></tr></tbody></table><br />Eventually, we found <a href="http://playerio.com/forum/multiplayer/cpu-runtime-thread-aborts-t1620">this thread</a> on the Player.IO forums which was made pretty much the day that we started having this problem unbearably, like 90% of the time we started running the game.  I am 90% sure that all of our thread abortions were the cause of the error discussed by Oliver:<br /><br /><blockquote>That error precisely means that one thread was caught using too much cpu, and that it was aborted as a consequence. <strong>We have to ensure that all events are handled swiftly (&lt;100ms), otherwise the server will perform really badly.</strong> I've specified earlier how our new measuring system works: first it uses global time, and then it switches over to thread-specific time, so the other load on the machine *shouldn't* make a difference... unless of course it's very high load, in which case all bets are off."</blockquote><br />Every player was saved in a "Quest" object, which contained that player's position on the board, their AP, the amount of resources they had, as well as the state of the board, tiles and monsters and so forth.  Some of these were stored in DatabaseArrays, and some of them were DatabaseObjects in DatabaseArrays...<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s1600/questobject.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="125" src="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s200/questobject.jpg" width="200" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">so much embedded</td></tr></tbody></table><br />One unforeseen problem with the arrays was this weird <a href="http://playerio.com/forum/bigdb-f32/cannot-create-circular-references-inside-database-objects-t1630">circular references error</a>, which happens if you try to create a new object, and then set an array in that object to be the same as another object's array.  Due to some weirdness, in order to copy an array over, right now the accepted workaround seems to be to just copy that array element by element... :/ Which could have contributed to our 100+ ms.  To change this array structure completely would have taken more time than we had, especially since we had already implemented most of the game, but I imagine we could have maybe substituted some of the objects for strings.  For instance, every monster on the board was a DatabaseObject containing an x-position, a y-position, a "type" (either weak or strong), and a health variable; instead this could have just been a coded String.<br /><br />Anyway -- leaving Get Across now, I'm left with a lot of Lessons Learned.<br /><br /><br /><h2>Paper Prototyping and Testing is Essential</h2>The first month or so of our Capstone class was just paper prototyping and testing, which I feel was met with a lot of skepticism on our part.  Paper prototyping for Get Across was pretty easy (if tedious): we just had a grid, and a couple other paper bits to represent mountains, rivers, hills, etc., which we rearranged as necessary.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s1600/paper%2Bprototype.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="239" src="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s320/paper%2Bprototype.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">paper protyping get across</td></tr></tbody></table><br />Paper prototyping was also a theme of the HCI class that I took this quarter, for obvious reasons: the more you start building something, the harder it is to change.  Paper prototyping helped us learn early which mechanics would work and which wouldn't.  For example, one "social" aspect of the game would make it so that, of two players playing a map, one player would have to sit on a button and wait for the other player to go through the gate the button opened; but we learned early on that, especially in an asynchronous game, this is an...inadequate idea.  When someone logs onto a game, they want to be able to do something; if they're just sitting and waiting for someone to move, unable to force them to do so, then it's regarded as a waste of time.  We eventually made it so that buttons only had to be pressed once for a gate to open permanently, which isn't novel, but what we were limited to in time this quarter.<br /><br />Paper prototyping was hard to use for some aspects of our game, however -- for instance, we were thinking that we could use a CityVille-like usage of energy which would come back in time, and in play-testing sessions, since we replenished AP instantly when people lost it, people just didn't feel like their AP was rare enough to save.  In retrospect, we could have just made it so that people would wait like 10 seconds or something when they ran out of AP.<br /><br /><br /><h2>Testing and More Testing and More Testing is Also Essential</h2>There were some days when we came to class having a shambled, three-legged version of a game, and it was on those days especially that I didn't want to let <em>anyone</em> see the game; but even if all of our functionality wasn't implemented yet, we were still able to discover a lot of interesting things that we just wouldn't have had the insight to realize on our own.  Here is a sample of the (very long) list of things we gathered during one playtest last month:<br /><ul><li>people will start moving with the mouse before the arrow keys</li><li>people don't notice AP diminishing</li><li>"toggle on and off the bridge is a little confusing" -- when bridge is selected, instead of putting the yellow square, put an overlay of the bridge?  also, turn off the bridge ability once a bridge is made</li><li>frustrating to wait for AP to come back when you've lost it</li><li>how many clicks do people use to go through the menu, and as they play?  try and minimize number of clicks</li><li>and so on</li></ul><br /><br /><h2>Having a Schedule Would Have Probably Made Our Lives Easier</h2>The way that we worked on Get Across was a little haphazardly -- we pushed out the features that we wanted to, versus the ones we probably should have worked on, which made it so that our Facebook integration was close to nothing.  Which brings me to the next point:<br /><br /><br /><h2>If It's Supposed to be a Facebook Game, Build It on Facebook From the Very Beginning!</h2>It seems obvious, but this particular Capstone advised this course very strongly: release on Newgrounds, then on Kongregate (which has a larger populace), then on Facebook.  In the end, we only did Kongregate and Facebook (since Player.IO supports these two, and not Newgrounds), but not focusing on Facebook integration from the very beginning (allowing you to see your friends, or to send invitations to them immediately) made Get Across's Facebook release very weak.<br /><br /><br /><br />And those are the writing-worthy ones that I can think of.  Simple, yet effective lessons.  In the end, working with Player.IO was fun and it definitely served its purpose, and the only thing keeping it from working perfectly for us was the learning curve.<br /><br />Knowing slightly more than I did before this game, and tons more than I know than when I worked with Jimmy and Leilani to put together <a href="http://nuubu.blogspot.com/2011/02/game-bonding-time.html">Bonding Time</a>, I am really excited to start my next game project. :D Just gotta think about what it will be.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Across: Kongregate Release]]></title>
    <link href="http://blog.neauro.com/blog/2011/05/23/get-across-kongregate-release/"/>
    <updated>2011-05-23T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/05/23/get-across-kongregate-release</id>
    <content type="html"><![CDATA[<div class='post'>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-FS01GyXZtMU/TdtOqq5GybI/AAAAAAAAAOM/KqG4OmKmecU/s1600/kongregate_users.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="197" src="http://2.bp.blogspot.com/-FS01GyXZtMU/TdtOqq5GybI/AAAAAAAAAOM/KqG4OmKmecU/s320/kongregate_users.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">the first 200-some players of our silly capstone game</td></tr></tbody></table><br />It's been about 24 hours since <a href="http://www.kongregate.com/games/getAcross/get-across">our first online release of Get Across</a>.  Our capstone class recommends moving from Newgrounds, to Kongregate, but then to Facebook, but it's taken us such a long time to learn Player.IO that we skipped straight to Kongregate, as <a href="http://playerio.com/documentation/quickconnect/kongregate">Player.IO already supports this.</a>.<br /><br />Still, our release was (to me) a little rushed, and I would have loved nothing better than to clutch the game even tighter and keep anyone from seeing it at all.  We have presentations on Tuesday on what our first round of releasing reveals to us about the game, and I haven't parsed through the data that we've collected yet, but an onslaught of a mysterious error regarding null quest objects made me really self-conscious about what was going on.  <em>I don't want anyone to play a game that is still buggy.  Nononononono!</em><br /><br />It's hard to debug from Player.IO's error log, though it is very informative concerning what errors popped up, whether they were serverside or clientside, when they happened, and how often.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-UwlYNphQNgA/TdtRshfzMqI/AAAAAAAAAOU/u3pc3S_SXdQ/s1600/playerio_errorlog.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="186" src="http://3.bp.blogspot.com/-UwlYNphQNgA/TdtRshfzMqI/AAAAAAAAAOU/u3pc3S_SXdQ/s320/playerio_errorlog.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">just look at those graphs, dude!</td></tr></tbody></table><br />Some of the players on Kongregate have been really helpful in leaving comments about their thoughts and the bugs they've encountered; but there are about 6 of these comments, and 200+ registered players, most of whom didn't really make it through the tutorial levels.  I have a good guess why: <em>the tutorials take forever to load</em>.<br /><br />I'm not sure why, but I'm guessing it might be because we have a lot of objects in the database, and a lot of the properties of those objects are nested objects or arrays, which must take longer to retrieve.  Seeing as tutorial levels are pretty essential for hooking in initial players, I'm hoping to make it so that the tutorial levels are completely static and client-side -- no saving data into the database, nothing.  If a player comes back, they'll just have to start over.  Hopefully this will make it so that we only really save "real" player data in the database as well, and keep out the clutter.<br /><br />So even though I really wouldn't have wanted to release the game this soon, this little bit of playtesting illuminated something that we otherwise would have learned at the last awful minute, for the final Facebook release.  Which is nice.<br /><br />As a sidenote, the last push I made to Get Across before the release were updated character sprites for our classes, "Cook," "Crafter," and "Planter."  Charlie drew the first set, which were endearingly derpy --<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-BpSQDmsoKDg/TdtS8xpShpI/AAAAAAAAAOc/xeVTMU2HQDw/s1600/old_classes.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="131" width="320" src="http://3.bp.blogspot.com/-BpSQDmsoKDg/TdtS8xpShpI/AAAAAAAAAOc/xeVTMU2HQDw/s320/old_classes.png" /></a></div><br />And these are the more recent ones --<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-X1nWWgR4z_E/TdtTFRAwnII/AAAAAAAAAOk/QkC5Sdg-LI0/s1600/getacross_classes.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="131" width="320" src="http://3.bp.blogspot.com/-X1nWWgR4z_E/TdtTFRAwnII/AAAAAAAAAOk/QkC5Sdg-LI0/s320/getacross_classes.png" /></a></div><br />Hopefully more character customization will come soon, though it's hard to say what we'll have time for.  2 weeks left to polish up the back-end code and the mechanics!</div>

]]></content>
  </entry>
  
</feed>
