<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Playerio | liwanag]]></title>
  <link href="http://neauro.github.io/blog/categories/playerio/atom.xml" rel="self"/>
  <link href="http://neauro.github.io/"/>
  <updated>2014-01-10T08:28:07-08:00</updated>
  <id>http://neauro.github.io/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Game: Get Across]]></title>
    <link href="http://neauro.github.io/blog/2011/06/08/game-get-across/"/>
    <updated>2011-06-08T00:00:00-07:00</updated>
    <id>http://neauro.github.io/blog/2011/06/08/game-get-across</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s1600/Getacross.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s320/Getacross.png" width="320" /></a></div><br />Yesterday was our last presentation for Games Capstone.  All in all, it was a pretty good quarter -- I've learned a lot about clientside and serverside game programming using Flixel and Player.IO, as well as how to solve (or even better, avoid dealing with) some of the most annoying problems.<br /><br />You can check <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">Get Across on Facebook</a>, and see <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">the other social games</a> on this webpage.<br /><br />First,<br /><br /><h2>An Overview</h2>Get Across is a multiplayer game with tile-based movement.  The objective is to get across (whoa!) a sort of terrain, where different parts of the terrain take more energy to get across, i.e. getting across a mountain takes more energy than getting across a hill, which in turn takes more energy than getting across normal flat ground.  The player can be one of several classes, and each class has its own special abilities: Crafters can get across water by building bridges, Planters can reduce energy usage, Cooks can replenish AP or lure monsters away with Monster Bacon, etc.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s1600/tutorial1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s320/tutorial1.jpg" width="319" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">terrain of the first tutorial</td></tr></tbody></table><br />The idea is that you and your friends could work together to solve boards, and be scored on things such as how long it took you to solve the board together, how much energy and other resources you used, etc.  There could be leaderboards for different teams, and you could also make boards on your own and have your friends "conquer" them.  Each terrain would be kind of like a puzzle that you would be able to solve in different ways, given your different abilities, and different "cards" that you could take into the level, which would have special effects like making mountains explode, or allow players to switch positions with each other, etc.  Like a board game.<br /><br /><br /><h2>Implementation</h2>We -- Ji, Charlie, and myself -- used Flixel, as well as Player.IO for the multiplayer stuff and saving players and states to the database.<br /><br /><br /><h2>Problems</h2>One of them was our thread abortion problem, which arose out of the blue at some point and refused to leave.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s1600/the%2Berror%2Bi%2Bhate.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="180" src="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s320/the%2Berror%2Bi%2Bhate.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">i hate you more than i hate shrimp and scallops</td></tr></tbody></table><br />Eventually, we found <a href="http://playerio.com/forum/multiplayer/cpu-runtime-thread-aborts-t1620">this thread</a> on the Player.IO forums which was made pretty much the day that we started having this problem unbearably, like 90% of the time we started running the game.  I am 90% sure that all of our thread abortions were the cause of the error discussed by Oliver:<br /><br /><blockquote>That error precisely means that one thread was caught using too much cpu, and that it was aborted as a consequence. <strong>We have to ensure that all events are handled swiftly (&lt;100ms), otherwise the server will perform really badly.</strong> I've specified earlier how our new measuring system works: first it uses global time, and then it switches over to thread-specific time, so the other load on the machine *shouldn't* make a difference... unless of course it's very high load, in which case all bets are off."</blockquote><br />Every player was saved in a "Quest" object, which contained that player's position on the board, their AP, the amount of resources they had, as well as the state of the board, tiles and monsters and so forth.  Some of these were stored in DatabaseArrays, and some of them were DatabaseObjects in DatabaseArrays...<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s1600/questobject.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="125" src="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s200/questobject.jpg" width="200" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">so much embedded</td></tr></tbody></table><br />One unforeseen problem with the arrays was this weird <a href="http://playerio.com/forum/bigdb-f32/cannot-create-circular-references-inside-database-objects-t1630">circular references error</a>, which happens if you try to create a new object, and then set an array in that object to be the same as another object's array.  Due to some weirdness, in order to copy an array over, right now the accepted workaround seems to be to just copy that array element by element... :/ Which could have contributed to our 100+ ms.  To change this array structure completely would have taken more time than we had, especially since we had already implemented most of the game, but I imagine we could have maybe substituted some of the objects for strings.  For instance, every monster on the board was a DatabaseObject containing an x-position, a y-position, a "type" (either weak or strong), and a health variable; instead this could have just been a coded String.<br /><br />Anyway -- leaving Get Across now, I'm left with a lot of Lessons Learned.<br /><br /><br /><h2>Paper Prototyping and Testing is Essential</h2>The first month or so of our Capstone class was just paper prototyping and testing, which I feel was met with a lot of skepticism on our part.  Paper prototyping for Get Across was pretty easy (if tedious): we just had a grid, and a couple other paper bits to represent mountains, rivers, hills, etc., which we rearranged as necessary.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s1600/paper%2Bprototype.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="239" src="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s320/paper%2Bprototype.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">paper protyping get across</td></tr></tbody></table><br />Paper prototyping was also a theme of the HCI class that I took this quarter, for obvious reasons: the more you start building something, the harder it is to change.  Paper prototyping helped us learn early which mechanics would work and which wouldn't.  For example, one "social" aspect of the game would make it so that, of two players playing a map, one player would have to sit on a button and wait for the other player to go through the gate the button opened; but we learned early on that, especially in an asynchronous game, this is an...inadequate idea.  When someone logs onto a game, they want to be able to do something; if they're just sitting and waiting for someone to move, unable to force them to do so, then it's regarded as a waste of time.  We eventually made it so that buttons only had to be pressed once for a gate to open permanently, which isn't novel, but what we were limited to in time this quarter.<br /><br />Paper prototyping was hard to use for some aspects of our game, however -- for instance, we were thinking that we could use a CityVille-like usage of energy which would come back in time, and in play-testing sessions, since we replenished AP instantly when people lost it, people just didn't feel like their AP was rare enough to save.  In retrospect, we could have just made it so that people would wait like 10 seconds or something when they ran out of AP.<br /><br /><br /><h2>Testing and More Testing and More Testing is Also Essential</h2>There were some days when we came to class having a shambled, three-legged version of a game, and it was on those days especially that I didn't want to let <em>anyone</em> see the game; but even if all of our functionality wasn't implemented yet, we were still able to discover a lot of interesting things that we just wouldn't have had the insight to realize on our own.  Here is a sample of the (very long) list of things we gathered during one playtest last month:<br /><ul><li>people will start moving with the mouse before the arrow keys</li><li>people don't notice AP diminishing</li><li>"toggle on and off the bridge is a little confusing" -- when bridge is selected, instead of putting the yellow square, put an overlay of the bridge?  also, turn off the bridge ability once a bridge is made</li><li>frustrating to wait for AP to come back when you've lost it</li><li>how many clicks do people use to go through the menu, and as they play?  try and minimize number of clicks</li><li>and so on</li></ul><br /><br /><h2>Having a Schedule Would Have Probably Made Our Lives Easier</h2>The way that we worked on Get Across was a little haphazardly -- we pushed out the features that we wanted to, versus the ones we probably should have worked on, which made it so that our Facebook integration was close to nothing.  Which brings me to the next point:<br /><br /><br /><h2>If It's Supposed to be a Facebook Game, Build It on Facebook From the Very Beginning!</h2>It seems obvious, but this particular Capstone advised this course very strongly: release on Newgrounds, then on Kongregate (which has a larger populace), then on Facebook.  In the end, we only did Kongregate and Facebook (since Player.IO supports these two, and not Newgrounds), but not focusing on Facebook integration from the very beginning (allowing you to see your friends, or to send invitations to them immediately) made Get Across's Facebook release very weak.<br /><br /><br /><br />And those are the writing-worthy ones that I can think of.  Simple, yet effective lessons.  In the end, working with Player.IO was fun and it definitely served its purpose, and the only thing keeping it from working perfectly for us was the learning curve.<br /><br />Knowing slightly more than I did before this game, and tons more than I know than when I worked with Jimmy and Leilani to put together <a href="http://nuubu.blogspot.com/2011/02/game-bonding-time.html">Bonding Time</a>, I am really excited to start my next game project. :D Just gotta think about what it will be.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Across: Kongregate Release]]></title>
    <link href="http://neauro.github.io/blog/2011/05/23/get-across-kongregate-release/"/>
    <updated>2011-05-23T00:00:00-07:00</updated>
    <id>http://neauro.github.io/blog/2011/05/23/get-across-kongregate-release</id>
    <content type="html"><![CDATA[<div class='post'>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-FS01GyXZtMU/TdtOqq5GybI/AAAAAAAAAOM/KqG4OmKmecU/s1600/kongregate_users.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="197" src="http://2.bp.blogspot.com/-FS01GyXZtMU/TdtOqq5GybI/AAAAAAAAAOM/KqG4OmKmecU/s320/kongregate_users.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">the first 200-some players of our silly capstone game</td></tr></tbody></table><br />It's been about 24 hours since <a href="http://www.kongregate.com/games/getAcross/get-across">our first online release of Get Across</a>.  Our capstone class recommends moving from Newgrounds, to Kongregate, but then to Facebook, but it's taken us such a long time to learn Player.IO that we skipped straight to Kongregate, as <a href="http://playerio.com/documentation/quickconnect/kongregate">Player.IO already supports this.</a>.<br /><br />Still, our release was (to me) a little rushed, and I would have loved nothing better than to clutch the game even tighter and keep anyone from seeing it at all.  We have presentations on Tuesday on what our first round of releasing reveals to us about the game, and I haven't parsed through the data that we've collected yet, but an onslaught of a mysterious error regarding null quest objects made me really self-conscious about what was going on.  <em>I don't want anyone to play a game that is still buggy.  Nononononono!</em><br /><br />It's hard to debug from Player.IO's error log, though it is very informative concerning what errors popped up, whether they were serverside or clientside, when they happened, and how often.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-UwlYNphQNgA/TdtRshfzMqI/AAAAAAAAAOU/u3pc3S_SXdQ/s1600/playerio_errorlog.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="186" src="http://3.bp.blogspot.com/-UwlYNphQNgA/TdtRshfzMqI/AAAAAAAAAOU/u3pc3S_SXdQ/s320/playerio_errorlog.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">just look at those graphs, dude!</td></tr></tbody></table><br />Some of the players on Kongregate have been really helpful in leaving comments about their thoughts and the bugs they've encountered; but there are about 6 of these comments, and 200+ registered players, most of whom didn't really make it through the tutorial levels.  I have a good guess why: <em>the tutorials take forever to load</em>.<br /><br />I'm not sure why, but I'm guessing it might be because we have a lot of objects in the database, and a lot of the properties of those objects are nested objects or arrays, which must take longer to retrieve.  Seeing as tutorial levels are pretty essential for hooking in initial players, I'm hoping to make it so that the tutorial levels are completely static and client-side -- no saving data into the database, nothing.  If a player comes back, they'll just have to start over.  Hopefully this will make it so that we only really save "real" player data in the database as well, and keep out the clutter.<br /><br />So even though I really wouldn't have wanted to release the game this soon, this little bit of playtesting illuminated something that we otherwise would have learned at the last awful minute, for the final Facebook release.  Which is nice.<br /><br />As a sidenote, the last push I made to Get Across before the release were updated character sprites for our classes, "Cook," "Crafter," and "Planter."  Charlie drew the first set, which were endearingly derpy --<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-BpSQDmsoKDg/TdtS8xpShpI/AAAAAAAAAOc/xeVTMU2HQDw/s1600/old_classes.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="131" width="320" src="http://3.bp.blogspot.com/-BpSQDmsoKDg/TdtS8xpShpI/AAAAAAAAAOc/xeVTMU2HQDw/s320/old_classes.png" /></a></div><br />And these are the more recent ones --<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-X1nWWgR4z_E/TdtTFRAwnII/AAAAAAAAAOk/QkC5Sdg-LI0/s1600/getacross_classes.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="131" width="320" src="http://3.bp.blogspot.com/-X1nWWgR4z_E/TdtTFRAwnII/AAAAAAAAAOk/QkC5Sdg-LI0/s320/getacross_classes.png" /></a></div><br />Hopefully more character customization will come soon, though it's hard to say what we'll have time for.  2 weeks left to polish up the back-end code and the mechanics!</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Player.IO -- Thoughts on the BigDB Administration UI]]></title>
    <link href="http://neauro.github.io/blog/2011/05/08/playerio-thoughts-on-bigdb/"/>
    <updated>2011-05-08T00:00:00-07:00</updated>
    <id>http://neauro.github.io/blog/2011/05/08/playerio-thoughts-on-bigdb</id>
    <content type="html"><![CDATA[<div class='post'>
I'm in Intro to Human Centered Interaction this quarter and so can't help being a little more thoughtful about the way things are designed, especially since I'm trying to get better at designing myself.  That being said, I've also been working with <a href="http://playerio.com/">Player.IO</a> all weekend, in particular the database-side stuff, and have some good-natured criticisms.<br /><br />Firstly -- <strong>the Player.IO administration area is pretty.</strong> :D<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-07pQuEots34/Tcc9kH2tUfI/AAAAAAAAANM/P1cnKwB0S3I/s1600/nicelayoutbro.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="310" src="http://3.bp.blogspot.com/-07pQuEots34/Tcc9kH2tUfI/AAAAAAAAANM/P1cnKwB0S3I/s640/nicelayoutbro.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">is this really all for me? &lt;3</td></tr></tbody></table><br />At a glance, everything looks very orderly and uncluttered.  Not only that, but the things you presumably want to do when you look at this page -- creating a table, adding a new object to a table, etc. -- are all very apparent.  Player.IO doesn't need to provide an intro tutorial for how to use (most of) their UI because the functions it offers are obvious.<br /><br /><strong>The layout also relies a lot on symbols to communicate ideas</strong>, i.e. the green "plus sign" for adding an object or adding a property to an object, or the red "minus sign" for deleting an object.  Luckily, there's alt text to explain what each symbol does, as I can imagine someone could get confused by the difference between "adding an object" or "adding a property to an object," especially as they both use some variation of the green plus sign.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-nIL2m-A0QiI/Tcc-qlsyVfI/AAAAAAAAANU/wAv9_O7YhY4/s1600/addproperty.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="58" src="http://2.bp.blogspot.com/-nIL2m-A0QiI/Tcc-qlsyVfI/AAAAAAAAANU/wAv9_O7YhY4/s640/addproperty.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">why did this computer not take a screencap of the cursor hovering over the green plus sign?<br />the world may never know</td></tr></tbody></table><br /><strong>When you want to change an object's property, you just click it.</strong>  There's even a helpful "click to edit" text which shows whenever your cursor hovers over a property.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-cbQT6dvY1yg/Tcc_HyUi85I/AAAAAAAAANc/xdSiKbLDY2s/s1600/itseasyy.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="60" src="http://3.bp.blogspot.com/-cbQT6dvY1yg/Tcc_HyUi85I/AAAAAAAAANc/xdSiKbLDY2s/s640/itseasyy.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">it's easy!</td></tr></tbody></table><br />Once you click a property, you click "Okay" and you're all done!  <br /><br />...except, you're not. o__o One of the first things I had to get used to was the "Save Changes" button, which is what you need to press in order to finalize the changes that you've made to an object.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-mFy6F-ySW2o/TdtGFefT3nI/AAAAAAAAANk/k4ca8a-Vhws/s1600/itseasyynot.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="90" src="http://2.bp.blogspot.com/-mFy6F-ySW2o/TdtGFefT3nI/AAAAAAAAANk/k4ca8a-Vhws/s640/itseasyynot.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">aaack</td></tr></tbody></table><br />The main reason why this is so easy to forget is because, other than the appearance of the button, <strong>there's no real visible indication that an object is "dirty" or has been altered and needs to be saved</strong>; and once you click "Save Changes," the only indication that you have of success is the "Save Changes" button disappearing, which just doesn't feel affirming.  It's like -- were the changes saved?  Did they fail?  Can I leave now?<br /><br /><strong>Saving your data is so subtle and anti-climatic that it's easy to forget to do it.</strong><br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-Md8qEM6FCQA/TdtLM5kjjCI/AAAAAAAAAN8/ZzA-sMsvkXo/s1600/waitwhatno.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="426" src="http://4.bp.blogspot.com/-Md8qEM6FCQA/TdtLM5kjjCI/AAAAAAAAAN8/ZzA-sMsvkXo/s640/waitwhatno.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">wait -- wh -- nooooooooo</td></tr></tbody></table><br />Then again, maybe the "Save Changes" button is the way it is because input fields to change properties opens whenever you click on a property, whether you actually wanted to change that property or not.  The only way to close out of changing a property once this happens is to say either say "okay" or "Delete." That being said, putting more prominence in the form of a confirmation message to the "Save Changes" button would probably make more sense than making the "Okay" button a "Cancel" button to close input-listening.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-cbQT6dvY1yg/Tcc_HyUi85I/AAAAAAAAANc/xdSiKbLDY2s/s1600/itseasyy.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="60" src="http://3.bp.blogspot.com/-cbQT6dvY1yg/Tcc_HyUi85I/AAAAAAAAANc/xdSiKbLDY2s/s640/itseasyy.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">even if you accidentally open this input field,<br />"Okay" and "Delete"&nbsp;make more sense<br />than "Cancel" and "Delete," i suppose</td></tr></tbody></table><br />A related issue: <strong>if you happen to click on an object or an array accidentally, that object or array gets emptied of all its data</strong>.  Since no alteration you make to a property gets saved until you press "Save Changes," at least it's not a permanent emptiness; but, there's no way to undo this object/array-emptying, so to undo you need to refresh the object completely.  This can be frustrating if you've made a lot of changes to other properties in the object, and now need to cancel all those changes just to get your emptied-out object/array back.<br /><br />Speaking of arrays, <strong>it took me forever to figure out how to add an array property to an object</strong>.  It turns out that this is the proper way to do it:<br /><br /><ol><li>In your object, press "+" to create a new property.</li><li>Set the new property's value to "Value is: Array."</li><li>Press "Okay."</li><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-cr-B_t0nEws/TdtMgmyrxNI/AAAAAAAAAOE/yRGeJ8foqyU/s1600/openthatarraybro.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="68" src="http://3.bp.blogspot.com/-cr-B_t0nEws/TdtMgmyrxNI/AAAAAAAAAOE/yRGeJ8foqyU/s640/openthatarraybro.png" width="640" /></a></div><li>You'll see something like the image above.  Click "Show array."</li><li>Add properties to the array one by one by clicking "+".</li></ol><br />This is a pretty roundabout method, considering that to make a value of a property an int, all you need to do is put an int in the field, then say "Okay."  When trying to put in an array, I was expecting to somehow form my input so that the values would get fed into the array automatically.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-GDEP6-4WlYE/TdtItydaogI/AAAAAAAAANs/BqaI9yop1iE/s1600/inputarrayvalues.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="88" src="http://3.bp.blogspot.com/-GDEP6-4WlYE/TdtItydaogI/AAAAAAAAANs/BqaI9yop1iE/s640/inputarrayvalues.png" width="640" /></a></div><br />It's also annoying that you have to click "Show array" before adding properties to it; it would be nice if the entire array just popped open when you went to add a property to it, since that's probably what you're going to do if you're clicking an array in the first place.  Clicking anywhere in that row outside of "show array" will just bring you back to the weird input box right above "Value is: Array." This is one case in which the "+" button for adding properties is unhelpfully small. (And of course, if you miss it and accidentally click somewhere, your entire array gets emptied, as I mentioned above.)<br /><br />Anyway, when I was making this example, I noticed <strong>Player.IO does a good job of telling you when your fields are malformed</strong>.  It might be marginally nicer to put some error message like, "This field needs an int in it, because that's what you said duh" but I don't know; maybe that would mess up the minimalism.  Then again, minimalist aesthetic should be about only giving you the information you need, right?<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-YYD3xF1d2lU/TdtKb9qaeOI/AAAAAAAAAN0/tZRyuNqhUD4/s1600/inputxpvaluesgooderror.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="86" src="http://3.bp.blogspot.com/-YYD3xF1d2lU/TdtKb9qaeOI/AAAAAAAAAN0/tZRyuNqhUD4/s640/inputxpvaluesgooderror.png" width="640" /></a></div><br />Another miscellaneous issue: <strong>you can't do batch alterations/deletions of objects.</strong> When I go through and cleanse all my test accounts and related information, I have to delete every single object by hand, rather than just selecting them all and deleting them in a fell swoop.  Time-consuming and annoying.<br /><br />All this being said, working with Player.IO has still been tons of fun.  I would have had no idea how to implement all this back-end stuff by myself -- or at the very least, it would have taken me much longer to figure out how to do.</div>

]]></content>
  </entry>
  
</feed>
