<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-27T09:05:28-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I've Been Doing Some Mobile Web Work Recently.]]></title>
    <link href="http://blog.neauro.com/blog/2013/07/25/ive-been-doing-some-mobile-web-work/"/>
    <updated>2013-07-25T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2013/07/25/ive-been-doing-some-mobile-web-work</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="p1">I'm unenthusiastic when it comes to designing websites for small screens like phones, probably because I don't have a smartphone. (No particular reason why — just that my 6-year-old palm-sized brick of a phone is sturdy and unexciting to steal, and I plan on staying with it as long as it stays with me.)</div><div class="p2"><br /></div><div class="p1"><a href="http://jquerymobile.com/">jQuery Mobile</a>&nbsp;is what I've been learning recently; it is a "mobile framework" and "HTML5-based user interface system," which means that you can</div><ul class="ul1"><li class="li1">stick it in your project</li><li class="li1">throw in some common "mobile" UI elements like headers and buttons, or even switches</li><li class="li1">have those buttons be styled to look pretty good already!</li></ul><div class="p2"><br /></div><div class="p1">Function-wise, you can also use jQuery Mobile to</div><ul class="ul1"><li class="li1"><a href="http://jquerymobile.com/demos/1.2.0/docs/pages/page-transitions.html">transition very prettily between pages and dialog boxes</a></li><li class="li1">easily support <a href="http://stackoverflow.com/questions/4176844/can-someone-explain-the-html5-aria-attribute">ARIA attributes</a>&nbsp;for better accessibility across your UI elements</li></ul><br />jQuery mobile was confusing for me at first because I would write simple markup, but when viewing it online, my bare elements would suddenly have tons upon tons of classes — a div with a class of <code>mobile-header</code>, for example, would suddenly be a div with the classes <code>mobile-header ui-header ui-bar-a</code>, and would also have a <code>data-role="header"</code> as well. Links in my <code>mobile-header</code> would have also been transformed into elements with tons of classes: <code>icon ui-btn-left ui-btn ui-btn-up-a ui-shadow ui-btn-corner-all</code>…<br /><br /><div class="p1">Which brings me to my next point about jQuery Mobile: it is a <i>pain</i> to style into your theme. Because elements can be so deeply nested, it's hard to figure out what exactly is making all of my links black when they should be blue, and so on. Trying to make a link blue may require that you overwrite not just one style but two. jQuery provides a <a href="http://jquerymobile.com/themeroller/index.php">theme roller</a>&nbsp;which you can use to change the default black style downloaded in the package, but as the things I want to make are radically different than the rounded, chrome buttons they offer, a theme roller doesn't help much.</div><div class="p2"><br /></div><div class="p1">Regarding getting started, I found that <a href="http://thehungrycoder.com/jquery/jquery-mobile/jquery-mobile-part-1-making-your-first-mobile-page.html">this blog post</a>&nbsp;and the ones following were quite helpful. Additionally, this link on <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu">Rethinking the mobile web</a>&nbsp;is a great primer on why developing for the mobile web is important (despite all my eye-rolling/teeth-gnashing) and gives data and another perspective on "mobile-first" design processes.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Things]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/20/javascript-things/"/>
    <updated>2012-08-20T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/20/javascript-things</id>
    <content type="html"><![CDATA[<div class='post'>
I get a little wary sometimes writing posts like these, especially since it involves copycatting other posts for sample code and etc. But...I just find that I learn better both a) working/writing out thoughts for myself; b) putting myself in a position of "teaching" in "public," where I become more thoughtful about what I'm doing and really understanding it; and, c) putting everything into a format like a blog post, where I can feel a modicum of success/productivity after posting. #realityissooobroken<br /><a href="http://stackoverflow.com/questions/2863435/front-end-developer-interview-questions"><br /></a><br /><h2><a href="http://stackoverflow.com/questions/2863435/front-end-developer-interview-questions">What is ECMAScript?</a></h2><a href="http://infrequently.org/2008/08/the-ecmajavascript-name-soup/">JavaScript</a>. <a href="http://www.dotnetguru2.org/sebastienros/index.php/2009/10/11/ecmascript-vs-javascript">ECMAScript 3 (EM3) is equivalent to JavaScript 1.5</a>, and is the best to program in for scripts that will run across various browsers (as of 2009). <a href="http://kangax.github.com/es5-compat-table/">This table</a>&nbsp;shows the existence of some EM5 functions for various browers.<br /><br /><br /><br /><h2>How do JavaScript functions deal with arguments?</h2>In JavaScript, every function has an argument list of variable length, so a function that takes and prints 1 argument can still be passed 3 arguments, and will complainlessly print out the first argument.<br /><br />A function can look at all the arguments its been passed by looking at an&nbsp;<code>arguments</code>&nbsp;object, which is like an array (with indexes, and a length, though you&nbsp;<em>can't</em>&nbsp;push/pop into it, or split it).<br /><br />Source:&nbsp;<a href="http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx">Function.apply and Function.call in JavaScript</a><br /><br /><br /><br /><h2>What's the difference between JavaScript <code>call</code> and <code>apply</code> functions?</h2>What <code>call</code> and <code>apply</code> do is change what the keyword <em>this</em> references at run-time.<br /><pre class="brush: js">x = 10;<br /><br /> function function_name() {<br />   alert(this.x);<br />  }<br /><br /> function();<br /></pre><br />In the previous, <code>this</code> references the global namespace, and the output is 10.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name() {<br />   alert(x);<br />  }<br /><br /> function();<br /> function.call(object);<br /></pre><br />This time, the first function call outputs 10, whereas the second function call outputs 15. <code>this</code> in the second function call uses <code>object</code> as the namespace, and refers to <code>object</code>'s value of <code>s</code>.<br /><br />You can also pass arguments to a function using <code>call</code>, as happens in the following.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name(message) {<br />   alert(message);<br />   alert(x);<br />  }<br /><br /> function("invoking f");<br /> function.call(object, "invoking f with a call");<br /></pre><br />Finally, what's the difference between <code>call</code> and <code>apply</code>? They both change the namespace at run-time, but <code>apply</code>'s second parameter always needs to be an array.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name(message) {<br />   alert(message);<br />   alert(x);<br />  }<br /><br /> function("invoking f");<br /> function.apply(object, ["invoking f with an apply"]);<br /></pre><br />Apply is the more interesting of the two; because it can use an array, it can work with JavaScript's <code>arguments</code> object.<br /><br />Source: <a href="http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx">Function.apply and Function.call in JavaScript</a>, <a href="http://odetocode.com/Blogs/scott/archive/2007/07/06/putting-function-apply-to-work.aspx">Putting Function.apply() to work</a><br /><br /><br /><h2>What is currying?</h2><div>To curry is to take a function which accepts multiple arguments, and to convert it into one funtion that takes one argument and returns another function. The last thing returned should be the result.</div><div><br /></div><div>What are the advantages of currying? If functions are in a curried form, they may be easier to apply partially.&nbsp;Also, the parameters that have been "left out" when a function is curry-fied may not even be known at compile time, but will be at run time.</div><div><br /></div><div>In general it seems to be that currying in general is done out of convenience rather than necessity, to create simpler-looking methods.</div><div><br /></div><div>JavaScript uses closures to save the partial state</div><div><br /></div><div>Source: <a href="http://www.quora.com/What-is-currying">What is currying?</a>,&nbsp;<a href="http://www.quora.com/What-are-the-main-advantages-and-use-cases-of-currying">What are the main advantages and use-cases of currying?</a>,&nbsp;<a href="http://stackoverflow.com/questions/2725811/is-currying-just-a-way-to-avoid-inheritance/2725841#2725841">Is currying just a way to avoid inheritance?</a></div><div><br /></div><div><br /></div><h2>How do closures work in JavaScript?</h2>A closure describes a function, and the environment that contains the variables that the function can reference. Because the closure is a stack frame that is not deallocated when a function returns, it also contains the local variables that remain "alive" after a function has returned. A closure is used every time a function is declared within another function.<br /><br /><pre class="brush: js">function say_hello(name) {<br />    var hello = "hello";<br />    var hello_alert = function () { alert(hello + name); }; // closure created!<br />    return hello_alert;<br />  }<br />  <br />  hello_arupaka = say_hello(arupaka);<br />  hello_arupaka(); // alerts "hello arupaka";<br /></pre><br />In most languages, after a function (like <code>say_hello(arupaka)</code>) returns, the local variables are destroyed; but, when calling <code>hello_arupaka()</code>, the locally-created text "<code>arupaka</code>" is still available. Closures!<br /><br /><pre class="brush: js">function setup_globals() {<br />    var num = "3";<br /><br />    var alert_num = function () { alert(num); };<br />    var increment_num = function () { num++;  };<br />    var decrement_num = function () { num-- };<br />    return hello_alert;<br />  }<br /></pre><br />So what are the closures of <code>alert_num</code>, <code>increment_num</code>, and <code>decrement_num</code> above, and how do they relate? Because closures are set up every time a function is called within a function, they all have shared access to the same closure.<br /><br />Note: if you were to call <code>setup_globals</code> one more time, all the inside functions would be overwritten.<br /><br />Next closure example: what does <code>testList()</code> output?<br /><pre class="brush: js">function buildList(list) {<br />  var result = [];<br />  for (var i = 0; i &lt; list.length; i++) {<br />    var item = 'item' + list[i];<br />    result.push( function() {alert(item + ' ' + list[i])} );<br />  }<br />  return result;<br />}<br /><br />function testList() {<br />  var fnlist = buildList([1,2,3]);<br />  for (var j = 0; j &lt; fnlist.length; j++) {<br />    fnlist[j]();<br />  }<br />}</pre><br />Answer: 3 alerts, all of which read <code>item3 undefined</code>. This is because all functions created by <code>result.push( function() {alert(item + ' ' + list[i])} );</code> have shared access to the same closure. The array containing these functions in turn looks like this:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-9nusfNfzd0c/UDJU6Uy4hBI/AAAAAAAACOc/Xlifc7pySVs/s1600/closurearray.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img alt="an array with each cell containing alert(item + &quot; &quot; + list[i]);" border="0" height="147" src="http://2.bp.blogspot.com/-9nusfNfzd0c/UDJU6Uy4hBI/AAAAAAAACOc/Xlifc7pySVs/s400/closurearray.jpg" title="" width="400" /></a></div><br />And when <code>testList</code> calls <code>fnlist[j]()</code>,&nbsp;each&nbsp;<code>list[i]</code>&nbsp;uses the same value of <code>i</code> (which was incremented to 3) and <code>list[3]</code> is undefined. Each cell alerts <code>item3</code> because that was the last value assigned to <code> var item</code>.<br /><br />Source: <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work">How do JavaScript closures work</a>?, <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Wikipedia: Closure</a>  <br /><br /><br /><h2>What's the difference between event bubbling and event capture?</h2>First: DOM (Document Object Model) is a convention for representing and interacting with objects in HTML, XHTML, and XML. When a page is rendered by a browser, that browser parses the HTML from the web server into an in-memory DOM. Different web browsers have their own internal model of DOM. The DOM views an HTML document <a href="http://www.w3schools.com/htmldom/dom_nodetree.asp">as a tree</a>.<br /><br />DOM events allow programming languages like JavaScript attach event handlers to tree nodes (different elements on a page), and react when users click/mouseover those nodes.<br /><br />So, what happens when you want to attach an event handler to a couple different elements on a webpage? Rather than define separate handlers for each element, you can have the events work with a node that contains those elements.<br /><br />In order to find the containing node, events need to be able to "propogate," or move through the DOM node tree. In event bubbling, the event is first handled at the inner most elements, and then propagated to the outer elements. (A great example of this is <a href="http://www.javascripter.net/faq/eventbubbling.htm">here</a>!) Event capturing is the opposite: the event is first handled by the outermost element, and then propagated to the inner-most element.<br /><br />Only event bubbling is supported by all major browsers.<br /><br />Sources: <a href="http://en.wikipedia.org/wiki/Document_Object_Model">Wikipedia: Document Object Model</a>, <a href="http://www.w3schools.com/htmldom/dom_nodetree.asp">W3Schools: HTML DOM Node Tree</a>, <a href="http://docstore.mik.ua/orelly/webprog/dhtml/ch06_05.htm">Event Propagation</a>, <a href="http://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing">StackOverflow: What is event bubbling and capturing?</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some HTML5/JavaScript Links]]></title>
    <link href="http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links/"/>
    <updated>2012-08-16T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2012/08/16/some-html5javascript-links</id>
    <content type="html"><![CDATA[<div class='post'>
Having done few HTML5 things, I've dug up some tutorials and interesting links.<br /><br /><br /><h2><a href="http://dev.opera.com/articles/view/html-5-canvas-the-basics/">HTML5 canvas - the basics</a></h2>I guess the first cool thing about HTML5 is this canvas thing, which is basically like a drawing pad that HTML5 bestows upon you, eyes glowing with love. "Go," it says. "Use this to create art with your present armory of JavaScript."<br /><br />A canvas object has a bunch of contexts, the same way a drawing pad has a lot of pages. JavaScript can be used to draw onto a context. Most browsers allow JavaScript to draw 2D things; some have experimental 3D contexts.<br /><br />Unlike a drawing pad, once you've decided to use a canvas's context, <i>that's the only context you can use for that canvas, ever</i>. It's kind of like you tore out a page from the drawing pad and all the other ones withered away in anguish.<br /><br />Interesting things canvases can do in HTML5:<br /><ul><li>draw lines, ex. <code>canvas.lineTo(xPos, yPos)</code></li><li>draw rectangles, ex. <code>canvas.fillRect(xPos,yPos,width,height)</code></li><li>draw images, ex. <code>canvas.drawImage(imgSource, xPos,yPos)</code></li><li>apply pixel manipulations to those images, ex. invert all colors</li><li>draw text (only in recent WebKit builds)</li><li>draw dropshadows and gradients for all your Web 2.0 needs</li></ul><br /><br /><h2><a href="http://html5.litten.com/understanding-save-and-restore-for-the-canvas-context/">Understanding save() and restore() for the Canvas Context</a></h2>When searching around for examples of canvas usage, I saw references to <code>canvas.save()</code> and <code>canvas.restore()</code> which were nicely explained in this article.<br /><br />In brief, every canvas contains a stack of "drawing states." Drawing states are comprised of a lot of data, including the current transformation region, the current width of line being drawn, the current front, and so on.<br /><br />If you want to draw a shape like a diamond (or rotated square), the steps to do this involve:<br /><ol><li>Make a canvas, retrieve its 2D context</li><li>2Dcontext.save()</li><li>Rotate the context</li><li>Draw a square on the context (which, since the canvas is rotated, will be diamond-shaped)</li></ol>If you then wanted to draw a new shape, like a regular square, you could easily pop the present drawing state with <code>2Dcontext.restore()</code> to get back to an un-rotated coordinate system. The diamond should stay the way that it is presently.<br /><br />Similarly, objects on a canvas can't be "just moved;" if you're translating an object across the canvas, the steps go<br /><ol><li>Clear the canvas</li><li>Draw the object in its new position</li><li>Repeat</li></ol><br /><br /><h2>HTML5: Writing a game, by Jason Croucher</h2>The blogging process of someone creating a Breakaway-type game in HTML5 and JavaScript. The final product, named Bouncing Animals, is <a href="http://jacebook.co.uk/share/html5/">here</a>. It's not really a tutorial, but I found it to be a good/simple primer.<br /><br /><ul><li><a href="http://jacebook.co.uk/blog/2010/09/11/html5-writing-a-game/">Part 1</a>&nbsp;involves: creating an HTML5 canvas, adding and drawing/playing images and sounds, how to make an event handler for a button and mouse, and starting/stopping a game.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s1600/bear1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="290" src="http://2.bp.blogspot.com/-3xaUG-xxqks/UCp5hUePotI/AAAAAAAACGY/eNy17Hg8YJ4/s400/bear1.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">getting exciting yet?</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step2/">Part 2</a>&nbsp;involves making the mushroom "wobble" between two pngs (one normal-sized, one slightly flattened) whenever it's hit by the bear.</li><li><a href="http://jacebook.co.uk/blog/2010/09/12/html5-writing-a-game-step-3/">Part 3</a>&nbsp;involves varying the bear's speed and angle.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s1600/bear2.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="232" src="http://1.bp.blogspot.com/-dWVk26eCMu0/UCqP5OpkC1I/AAAAAAAACHQ/kv8sMErvNhs/s320/bear2.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">we gettin wild in here</td></tr></tbody></table><br /></li><li><a href="http://jacebook.co.uk/blog/2010/09/15/html5-writing-a-game-step-4/">Part 4</a>&nbsp;and <a href="http://jacebook.co.uk/blog/2010/09/20/html5-writing-a-game-step-5/">Part 5</a>&nbsp;talk about game objects and optimal FPS numbers for various browsers.</li></ul><div><br /><br /><h2><a href="http://michalbe.blogspot.com/2010/09/simple-game-with-html5-canvas-part-1.html">Tutorial: Simple game with HTML5 Canvas</a></h2></div><div>An actual game tutorial for a Doodle Jump clone that's fairly comprehensive, and involves drawing objects on an HTML5 context, some animations, and so on.<br /><br /><br /><h2>JavaScript function declarations vs. function expressions</h2>In the previous tutorial, I encountered my first instance of a function expression. Essentially, a <strong>function definition</strong> looks like<br /><pre class="brush: js"> function function_name() {<br />   // stuff<br />  }<br /></pre><br />whereas a <strong>function expression</strong> looks like<br /><pre class="brush: js"> var = function function_name() {<br />   // stuff<br />  };<br /></pre></div><br />Some links I found which discussing declarations versus expressions are <a href="http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/">Function Declarations vs. Function Expressions</a> and <a href="http://kangax.github.com/nfe/">Named function expressions demystified</a>, and the differences include the following:<br /><br /><ul><li>Function expressions can be named or anonymous.</li><li>Function declarations are parsed and evaluated before any code is executed, whereas function expressions are evaluated at run-time. Therefore, if you call a declared function at any time, it should be okay, whereas function expressions must be defined before being called.</li><li>Function declarations should <i>not</i>&nbsp;be used in if-statements. In contrast, function expressions are okay to call in if-statements, and are sometimes used this way to allow for best performance ("don't define this function unless it's needed").</li><li>Function expressions mimic what JavaScript is <i>actually</i>&nbsp;doing, which is creating an object every time a function is defined.</li></ul><div><br /></div><div>In general it seems that function expressions are the favored creature.</div></div>

]]></content>
  </entry>
  
</feed>
