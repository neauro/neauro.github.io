<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Processing | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/processing/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-01-16T19:43:58-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes From Messing Around With Processing Tutorials]]></title>
    <link href="http://blog.neauro.com/blog/2011/06/08/notes-from-messing-around-with/"/>
    <updated>2011-06-08T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/06/08/notes-from-messing-around-with</id>
    <content type="html"><![CDATA[<div class='post'>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-RhK-RFQbcGY/TfBC8WD0qyI/AAAAAAAAAQk/pllWCnFCrLM/s1600/processingcircles.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="319" src="http://4.bp.blogspot.com/-RhK-RFQbcGY/TfBC8WD0qyI/AAAAAAAAAQk/pllWCnFCrLM/s320/processingcircles.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">my first great processing creation</td></tr></tbody></table><br />Processing is apparently supposed to allow artists to interface with Java as if it were more of a scripting language, in case Java itself is too scary or complicated.  (It's also meant to allow you to do simple projects without the overhead of all the Java code and learning Java, and is a good gateway programming language.)  Actually, thinking about it now, my first project with Java involving drawing a house, lifting pens and putting them down and changing colors and all.  It was the most frustrating thing ever and I'm glad I stuck with CS anyway.<br /><br />Little bundles of code for Processing are referred to as "sketches." Here is the code in case you want to create a sketch to make tons of circles for yourself.  (It is also Tutorial 1 on the Processing website.)<br /><br /><pre class="brush:jscript">void setup() {<br />  size(480, 120);<br />  smooth();<br />}<br /><br />void draw() {<br />  if (mousePressed) {<br />    fill(0);<br />  } else {<br />    fill(255);<br />  }<br />  ellipse(mouseX, mouseY, 80, 80);<br />}<br /></pre><br />It seems that <code>setup()</code> is called once, when the program starts running; <code>draw()</code> is called constantly, much like an <code>update()</code> function in game programming.  You can also name functions with headers like <code>void mousePressed()</code>, which is a function which would be called every time the mouse is pressed.<br /><br />After you're done coding something with Processing, you can Export it into an applet, or an application for Windows, OSX, or Linux.  You can also just easily save frames by calling <code>saveFrame("name-of-output-picture####.png")</code>, where the hash marks will be replaced with a numbered sequence.<br /><br />Here's sample code that deals with creating a Car object in Processing:<br /><br /><pre class="brush:jscript">Car myCar1;<br />Car myCar2; // Two objects!<br /><br />void setup() {<br />  size(200,200);<br />  // Parameters go inside the parentheses when the object is constructed.<br />  myCar1 = new Car(color(255,0,0),0,100,2); <br />  myCar2 = new Car(color(0,0,255),0,10,1);<br />}<br /><br />void draw() {<br />  background(255);<br />  myCar1.drive();<br />  myCar1.display();<br />  myCar2.drive();<br />  myCar2.display();<br />}<br /><br />// Even though there are multiple objects, we still only need one class. <br />// No matter how many cookies we make, only one cookie cutter is needed.<br />class Car { <br />  color c;<br />  float xpos;<br />  float ypos;<br />  float xspeed;<br /><br />  // The Constructor is defined with arguments.<br />  Car(color tempC, float tempXpos, float tempYpos, float tempXspeed) { <br />    c = tempC;<br />    xpos = tempXpos;<br />    ypos = tempYpos;<br />    xspeed = tempXspeed;<br />  }<br /><br />  void display() {<br />    stroke(0);<br />    fill(c);<br />    rectMode(CENTER);<br />    rect(xpos,ypos,20,10);<br />  }<br /><br />  void drive() {<br />    xpos = xpos + xspeed;<br />    if (xpos &gt; width) {<br />      xpos = 0;<br />    }<br />  }<br />}<br /></pre><br />And here's an example of grabbing samples of color from an image:<br /><pre class="brush:jscript">for (int x = 0; x &lt; img.width; x++) {<br />  for (int y = 0; y &lt; img.height; y++ ) {<br />    // Calculate the 1D pixel location<br />    int loc = x + y*img.width;<br />    // Get the R,G,B values from image<br />    float r = red   (img.pixels[loc]);<br />    float g = green (img.pixels[loc]);<br />    float b = blue  (img.pixels[loc]);<br />    // Change brightness according to the mouse here<br />    float adjustBrightness = ((float) mouseX / width) * 8.0;<br />    r *= adjustBrightness;<br />    g *= adjustBrightness;<br />    b *= adjustBrightness;<br />    // Constrain RGB to between 0-255<br />    r = constrain(r,0,255);<br />    g = constrain(g,0,255);<br />    b = constrain(b,0,255);<br />    // Make a new color and set pixel in the window<br />    color c = color(r,g,b);<br />    pixels[loc] = c;<br />  }<br />}<br /></pre>Other miscellaneous notes: <br /><ul><li><code>width</code> and <code>height</code> are variables which refer to the size of the sketch</li><li><code>size(x, y, option)</code> will create a sketch of width x and height y, with an optional rendering mode.  The default is <code>JAVA2D</code>, which does high-quality 2D graphics at the expense of speed.  <code>P2D</code> refers to Processing 2D, which has simple graphics and fast pixel operations, so it's good if you need to do thousands of shapes.  <code>P3D</code> (Processing 3D renderer) can produce 3D graphics even without the use of a library, and is meant for speed and pixel operations.  <code>OPENGL</code> mixes use of Sun's Java for OpenGL library for faster rendering, and Processing's APIs for application export (for which the <code>P3D</code> renderer is a simpler solution, if you don't want your users to see the whole "Are you sure you want to trust Sun Microsystems" dialog).  Finally, <code>size(x, y, PDF, "pdf-name.pdf")</code> will draw to a file rather than a screen.</li><li>You can load images easily in Processing, but it takes a while, so it's best to do it only once; i.e. not in <code>draw()</code> but in <code>setup()</code>.<br /></li></ul><br /><br />Sources: <br /><ul><li><a href="http://processing.org/learning/gettingstarted/">Processing: Getting Started</a></li><li><a href="http://processing.org/learning/overview/">Processing: Processing Overview</a></li><li><a href="http://processing.org/learning/objects/">Processing: Object Oriented Programming</a></li><li><a href="http://processing.org/learning/pixels/">Processing: Images &amp; Pixels</a></li></ul></div>

]]></content>
  </entry>
  
</feed>
