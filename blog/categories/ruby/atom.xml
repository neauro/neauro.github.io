<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-27T09:05:28-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adding a New Model to a Database in Rails]]></title>
    <link href="http://blog.neauro.com/blog/2011/08/16/adding-new-model-to-database-in-rails/"/>
    <updated>2011-08-16T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/08/16/adding-new-model-to-database-in-rails</id>
    <content type="html"><![CDATA[<div class='post'>
For whatever reason, adding a model to a database in Rails took me forever to understand.  Thanks to <a href="https://github.com/kellydunn">Kelly</a>, I now have model-making in Rails down to an art.<br /><br />Want to add a new table or a new column to your Rails application?  This is what you do!<br /><br /><br /><h3>1. Create a new .rb file for your model</h3>Let's say that, just like me, you want to create a new database table in your application to keep track of information about dogs.  We (by virtue of the same logic which affords physics problems friction-less vacuums with which to work in) already have a couple tables in our database: one pertaining to users (breeders or owners of dogs), and one pertaining to breeds.  We will keep it simple for now; all we want to know about a dog object for now is what its name is, what user it belongs to, and what breed it is.<br /><br />To add a Dogs table, we first need to create a file which will describe its model.  Part of this is describing what the relationship of the new model is to existing models, like User and Breed.  From real-world experience, we know that a dog generally has one user/owner, and one breed.<br /><br />So, create a file in <strong>app/models/</strong> called <strong>dog.rb</strong>, and type in the following:<br /><pre class="brush: cpp">class Dog &lt; ActiveRecord::Base<br />  belongs_to :user<br />  belongs_to :breed<br />end<br /></pre>Dog inherits Active Record.  Active Record's sole purpose of existence is to help create associations between different objects.  This code will later be macro'ed out by Active Record into something more lower-level to create the associations.<br /><br />The lines that start with <code>belongs_to</code> describe the relationship that this new model has to existing ones.  Basically, a dog belongs to one owner/user, and to one breed.  <br /><br />Rails also has another keyword called <code>has_one</code>, which at first might also seem like an okay association to make between dogs and users; after all, a dog <em>has_one</em> user, right?  <a href="http://duanesbrain.blogspot.com/2006/05/ruby-on-rails-hasone-versus-belongsto.html">But belongs_to is more correct, because has_one implies more of a one-to-one relationship</a>, where you might be doing something like creating a new user every time you create a new dog.  Since users may later obtain more dogs, <code>belongs_to</code> would be more appropriate in the case you want to attach a new dog to an existing user.  (Note: belongs_to also makes it so that the Dogs table will have to be responsible for its foreign key with Users, whereas it would be the opposite case for has_one.)<br /><br /><br /><h3>2. Change your existing models to reflect their relationship to the new model</h3>Because a User can have many dogs, and have many different breeds of dogs, User should now look like this: <br /><pre class="brush: cpp">class User &lt; ActiveRecord::Base<br />&nbsp;&nbsp;acts_as_authentic<br />&nbsp;&nbsp;has_many :dogs<br />&nbsp;&nbsp;has_many :breeds, :through =&gt; :dogs<br />end<br /></pre>And because many dogs can be of a certain breed, and breeds can be owned by multiple owners, Breeds will look the same -- <br /><pre class="brush: cpp">class Breed &lt; ActiveRecord::Base<br />&nbsp;&nbsp;has_many :dogs<br />&nbsp;&nbsp;has_many :users, :through =&gt; :dogs<br />end<br /></pre><br /><br /><h3>3. Generate a new migration</h3>Now you have to create a migration which, when run, will create the relevant tables in a structured manner.  You could also be hipster about it and edit SQL on your database by hand, but then you'd would have to tell the other people you're working with of what you've done if they have local databases, or else run the same SQL on production databases.  With migrations, you can make changes modular, and even roll back changes easily.<br /><br />Run <code>rails g migration create_dogs_table</code>.  This will create a file in <strong>db/migrate</strong> which will look something like this: <br /><blockquote><strong>20110807213821_create_dogs_table.rb</strong></blockquote>The numbers on the left are a timestamp, which is needed by Active Record so it will know what migrations that you haven't yet run, so that it can run them for you.<br /><br /><br /><br /><h3>4. Edit the migration file to describe what tables or columns should be added to your database.</h3>Open your migration file and type in these things: <br /><pre class="brush: cpp">class CreateDogTable &lt; ActiveRecord::Migration<br />  def self.up<br />  end<br /><br />  def self.down<br />  end<br />end<br /></pre><code>self.up</code> is executed when a database is updated; <code>self.down</code> is executed when a database is rolled back due to errors.  So, in <code>self.up</code> you want to create your new tables and columns; in <code>self.down</code> you want to define code to remove those tables and columns.  With dog objects, all we said we cared about earlier was the name, so let's just make a table which will (automatically) contain a unique ID, a timestamp, and a string for each dog object.  <br /><pre class="brush: cpp">class CreateDog &lt; ActiveRecord::Migration<br />  def self.up<br />    create_table :dogs do | d |<br />      d.timestamps<br />      d.string :name<br />    end<br />  end<br /><br />  def self.down<br />    drop_table :dogs<br />  end<br />end<br /></pre><br /><br /><h3>5. Run the migration to create your table</h3>Run the migration by typing <code>rake db:migrate</code>.  Remember how the migration that we generated had a timestamp?  When you run <code>rake db:migrate</code>, Active Record can use those to figure out all the migrations that might have been added to your code base, which have not yet been run on a certain database (such as the one pertaining to production).  Also, because the code to create and drop data from a database is so high-level, it doesn't really matter whether your actual code is in sqlite3 or in MySQL.  You can even use both depending on whether you're in development or production stages.<br /><br />Hurray!  Now you have new tables and columns in your database!  <br /><br /><div class="separator" style="clear: both; text-align: center;"></div><br /><br />Sources: <br /><ul><li><a href="https://github.com/kellydunn">Kelly</a></li><li><a href="http://ar.rubyonrails.org/">RubyonRails.org: Active Record</a></li><li><a href="http://duanesbrain.blogspot.com/2006/05/ruby-on-rails-hasone-versus-belongsto.html">Duane's Brain: Ruby on Rails : Has_One versus Belongs_To</a></li></ul></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>nadine a.</div>
<div class='content'>
Kelly has been being really hipster and avoiding auto-generating files :P But thanks!  Now that I know how to create stuff &quot;model dog&quot; should be easier.  Also, &quot;change&quot; sounds definitely more convenient.  Thanks!</div>
</div>
<div class='comment'>
<div class='author'>jshou</div>
<div class='content'>
If you do &quot;rails g model dog&quot;, the model, migration, tests and test helper files are automatically generated.  <br /><br />Also, in Rails 3.1, you don&#39;t have to define both up and down methods if down is obvious from what up is.  You can just define a method &quot;change&quot; with the contents of &quot;up&quot; would have been, and rails can figure out &quot;down&quot; by itself.<br /><br />The only caveat is that if change is drop_table, you have to use down and up, because rails can&#39;t figure out what columns to add back if you roll back the drop.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
