<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flash | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/flash/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-26T09:11:38-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Game: Itsy Bitsy Spider of the Cosmos]]></title>
    <link href="http://blog.neauro.com/blog/2011/10/22/game-itsy-bitsy-spider-of-cosmos/"/>
    <updated>2011-10-22T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/10/22/game-itsy-bitsy-spider-of-cosmos</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-bPeKp0xqrN0/TqEALG74F4I/AAAAAAAAAec/XbOusWYUmWY/s1600/blog-pic.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://4.bp.blogspot.com/-bPeKp0xqrN0/TqEALG74F4I/AAAAAAAAAec/XbOusWYUmWY/s320/blog-pic.png" width="210" /></a></div><br />Our company game jam ended after some many and tiring but exciting hours.  With much help from <a href="http://evolutionlive.blogspot.com/">Alex</a> on the building of our trampoline web mechanic, I think we were able to make a pretty interesting game, one that I think would be fun to take to other places (if I ever find the time, gah).<br /><br />The theme of our game jam was "restraint," which immediately made me think about spiderwebs, and from there me and my teammate came up with a cute story relating to <a href="http://en.wikipedia.org/wiki/The_Spider's_Thread">The Spider's Thread</a>, which is an old Japanese short story.  From there I super focused on re-learning <a href="http://flixel.org/">Flixel</a>, and team-mate handled art assets and story, which luckily he was quite enthusiastic about.<br /><br />Flixel has a lot of cool things now, like an interactive debugger which acts as a trace log as well as a running poll for whatever variable you wish, and can also allow you to rewind and pause gameplay.  (To open it, press "~" while your game is running.) Luckily, it is easy to get the hang of, even when trying to remember how to make a FlxRect.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-gFziC3DIE1I/TqEAEAHjgcI/AAAAAAAAAeQ/M9JF_rreJMc/s1600/proto4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://3.bp.blogspot.com/-gFziC3DIE1I/TqEAEAHjgcI/AAAAAAAAAeQ/M9JF_rreJMc/s320/proto4.png" width="212" /></a></div><br />Alex helped a ton with the web mechanic.  The idea is that the player would be able to draw webs between obstacles in order to propel themselves towards the heavens and nirvana.  However, the web for some reason wouldn't anchor on some of the obstacles, so we secretly made it so that you could draw webs anywhere on the screen, and since we explained the mechanic as "Anchor your webs on obstacles!" no one knew the difference. :D<br /><br />Other interesting design-y things:<br /><ul><li>I initially wanted to make the obstacles randomly generate and fall down, but then we discussed what would happen if blocks fell in an unfortunate pattern that hemmed a player in, so we made the blocks breakable -- hopefully allowing players to have a feeling of happiness when destroying something</li><li>This meant the player would need health to limit from just breaking through everything, and may have to make grueling decisions like "Should I just bust through this obstacle for mad points" or "Should I take the long route to replenish my health with a floating, rotating soda can"</li></ul><br />Hopefully I'll be able to revisit this project again sometime to really polish it up.  In the meantime, you can read more about this project and the other game jam projects on Fugazo's <a href="http://www.fugazo.com/archives/1715">blog</a>.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-IsnU69WbRd8/TqMoufbw2FI/AAAAAAAAAes/4j2cpl2pRiM/s1600/proto7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://3.bp.blogspot.com/-IsnU69WbRd8/TqMoufbw2FI/AAAAAAAAAes/4j2cpl2pRiM/s320/proto7.png" width="214" /></a></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game: Spider]]></title>
    <link href="http://blog.neauro.com/blog/2011/10/13/game-spider/"/>
    <updated>2011-10-13T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/10/13/game-spider</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-AkrTHFgH8Jw/TpcA3TSahXI/AAAAAAAAAeE/b6F-JC3CAIM/s1600/proto1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-AkrTHFgH8Jw/TpcA3TSahXI/AAAAAAAAAeE/b6F-JC3CAIM/s320/proto1.png" width="212" /></a></div><br />My company, Fugazo, was one of the finalists of this year's <a href="http://www.indiecade.com/index.php/2011/Finalists/">Indiecade</a>.  Our CEO and one of the designers attended the conference and were subsequently impressed by the fact that many of the finalists, like Sissyâ€™s Magical Ponycorn Adventure, had been created in one or two days during the <a href="http://arisgames.org/global-game-jam-2011/">2011 Global Game Jam</a>.<br /><br />So, now we're having a company-wide game jam!<br /><br />I don't yet have a "dedicated" programmer on my team, so I'm programming for myself.  I haven't touched Flixel in 4 months but maybe if I hit myself against it hard enough, for for long enough, everything will be just fine.<br /><br />Our theme was "restraint" (a theme from a previous GGJ).  Our game's present working title is just "Spider," and I need to get back to it!<br /><br /><strong>Update:</strong> "Finished" game post is <a href="http://nuubu.blogspot.com/2011/10/game-itsy-bitsy-spider-of-cosmos.html">here</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game: Get Across]]></title>
    <link href="http://blog.neauro.com/blog/2011/06/08/game-get-across/"/>
    <updated>2011-06-08T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/06/08/game-get-across</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s1600/Getacross.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://1.bp.blogspot.com/-BnoNmU79S3s/Te6fCLq8juI/AAAAAAAAAPs/51hqo7V6sBs/s320/Getacross.png" width="320" /></a></div><br />Yesterday was our last presentation for Games Capstone.  All in all, it was a pretty good quarter -- I've learned a lot about clientside and serverside game programming using Flixel and Player.IO, as well as how to solve (or even better, avoid dealing with) some of the most annoying problems.<br /><br />You can check <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">Get Across on Facebook</a>, and see <a href="http://www.cs.washington.edu/research/projects/instr/cse481d/11sp/games/#">the other social games</a> on this webpage.<br /><br />First,<br /><br /><h2>An Overview</h2>Get Across is a multiplayer game with tile-based movement.  The objective is to get across (whoa!) a sort of terrain, where different parts of the terrain take more energy to get across, i.e. getting across a mountain takes more energy than getting across a hill, which in turn takes more energy than getting across normal flat ground.  The player can be one of several classes, and each class has its own special abilities: Crafters can get across water by building bridges, Planters can reduce energy usage, Cooks can replenish AP or lure monsters away with Monster Bacon, etc.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s1600/tutorial1.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://1.bp.blogspot.com/-QPmFnAiZ3_g/Te-5WmWhIII/AAAAAAAAAQE/fC89efc8d5s/s320/tutorial1.jpg" width="319" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">terrain of the first tutorial</td></tr></tbody></table><br />The idea is that you and your friends could work together to solve boards, and be scored on things such as how long it took you to solve the board together, how much energy and other resources you used, etc.  There could be leaderboards for different teams, and you could also make boards on your own and have your friends "conquer" them.  Each terrain would be kind of like a puzzle that you would be able to solve in different ways, given your different abilities, and different "cards" that you could take into the level, which would have special effects like making mountains explode, or allow players to switch positions with each other, etc.  Like a board game.<br /><br /><br /><h2>Implementation</h2>We -- Ji, Charlie, and myself -- used Flixel, as well as Player.IO for the multiplayer stuff and saving players and states to the database.<br /><br /><br /><h2>Problems</h2>One of them was our thread abortion problem, which arose out of the blue at some point and refused to leave.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s1600/the%2Berror%2Bi%2Bhate.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="180" src="http://1.bp.blogspot.com/-oy4_dhDXsrM/Te6gZkim6YI/AAAAAAAAAP0/oMnhzpEFDh8/s320/the%2Berror%2Bi%2Bhate.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">i hate you more than i hate shrimp and scallops</td></tr></tbody></table><br />Eventually, we found <a href="http://playerio.com/forum/multiplayer/cpu-runtime-thread-aborts-t1620">this thread</a> on the Player.IO forums which was made pretty much the day that we started having this problem unbearably, like 90% of the time we started running the game.  I am 90% sure that all of our thread abortions were the cause of the error discussed by Oliver:<br /><br /><blockquote>That error precisely means that one thread was caught using too much cpu, and that it was aborted as a consequence. <strong>We have to ensure that all events are handled swiftly (&lt;100ms), otherwise the server will perform really badly.</strong> I've specified earlier how our new measuring system works: first it uses global time, and then it switches over to thread-specific time, so the other load on the machine *shouldn't* make a difference... unless of course it's very high load, in which case all bets are off."</blockquote><br />Every player was saved in a "Quest" object, which contained that player's position on the board, their AP, the amount of resources they had, as well as the state of the board, tiles and monsters and so forth.  Some of these were stored in DatabaseArrays, and some of them were DatabaseObjects in DatabaseArrays...<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s1600/questobject.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="125" src="http://3.bp.blogspot.com/-QK1LUANMpos/Te6ky6yvolI/AAAAAAAAAxU/EGUMEZ3DhKU/s200/questobject.jpg" width="200" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">so much embedded</td></tr></tbody></table><br />One unforeseen problem with the arrays was this weird <a href="http://playerio.com/forum/bigdb-f32/cannot-create-circular-references-inside-database-objects-t1630">circular references error</a>, which happens if you try to create a new object, and then set an array in that object to be the same as another object's array.  Due to some weirdness, in order to copy an array over, right now the accepted workaround seems to be to just copy that array element by element... :/ Which could have contributed to our 100+ ms.  To change this array structure completely would have taken more time than we had, especially since we had already implemented most of the game, but I imagine we could have maybe substituted some of the objects for strings.  For instance, every monster on the board was a DatabaseObject containing an x-position, a y-position, a "type" (either weak or strong), and a health variable; instead this could have just been a coded String.<br /><br />Anyway -- leaving Get Across now, I'm left with a lot of Lessons Learned.<br /><br /><br /><h2>Paper Prototyping and Testing is Essential</h2>The first month or so of our Capstone class was just paper prototyping and testing, which I feel was met with a lot of skepticism on our part.  Paper prototyping for Get Across was pretty easy (if tedious): we just had a grid, and a couple other paper bits to represent mountains, rivers, hills, etc., which we rearranged as necessary.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s1600/paper%2Bprototype.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="239" src="http://1.bp.blogspot.com/-V4fBD--t-mA/Te6tbnCe-II/AAAAAAAAAP8/KxqyTZKPVhQ/s320/paper%2Bprototype.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">paper protyping get across</td></tr></tbody></table><br />Paper prototyping was also a theme of the HCI class that I took this quarter, for obvious reasons: the more you start building something, the harder it is to change.  Paper prototyping helped us learn early which mechanics would work and which wouldn't.  For example, one "social" aspect of the game would make it so that, of two players playing a map, one player would have to sit on a button and wait for the other player to go through the gate the button opened; but we learned early on that, especially in an asynchronous game, this is an...inadequate idea.  When someone logs onto a game, they want to be able to do something; if they're just sitting and waiting for someone to move, unable to force them to do so, then it's regarded as a waste of time.  We eventually made it so that buttons only had to be pressed once for a gate to open permanently, which isn't novel, but what we were limited to in time this quarter.<br /><br />Paper prototyping was hard to use for some aspects of our game, however -- for instance, we were thinking that we could use a CityVille-like usage of energy which would come back in time, and in play-testing sessions, since we replenished AP instantly when people lost it, people just didn't feel like their AP was rare enough to save.  In retrospect, we could have just made it so that people would wait like 10 seconds or something when they ran out of AP.<br /><br /><br /><h2>Testing and More Testing and More Testing is Also Essential</h2>There were some days when we came to class having a shambled, three-legged version of a game, and it was on those days especially that I didn't want to let <em>anyone</em> see the game; but even if all of our functionality wasn't implemented yet, we were still able to discover a lot of interesting things that we just wouldn't have had the insight to realize on our own.  Here is a sample of the (very long) list of things we gathered during one playtest last month:<br /><ul><li>people will start moving with the mouse before the arrow keys</li><li>people don't notice AP diminishing</li><li>"toggle on and off the bridge is a little confusing" -- when bridge is selected, instead of putting the yellow square, put an overlay of the bridge?  also, turn off the bridge ability once a bridge is made</li><li>frustrating to wait for AP to come back when you've lost it</li><li>how many clicks do people use to go through the menu, and as they play?  try and minimize number of clicks</li><li>and so on</li></ul><br /><br /><h2>Having a Schedule Would Have Probably Made Our Lives Easier</h2>The way that we worked on Get Across was a little haphazardly -- we pushed out the features that we wanted to, versus the ones we probably should have worked on, which made it so that our Facebook integration was close to nothing.  Which brings me to the next point:<br /><br /><br /><h2>If It's Supposed to be a Facebook Game, Build It on Facebook From the Very Beginning!</h2>It seems obvious, but this particular Capstone advised this course very strongly: release on Newgrounds, then on Kongregate (which has a larger populace), then on Facebook.  In the end, we only did Kongregate and Facebook (since Player.IO supports these two, and not Newgrounds), but not focusing on Facebook integration from the very beginning (allowing you to see your friends, or to send invitations to them immediately) made Get Across's Facebook release very weak.<br /><br /><br /><br />And those are the writing-worthy ones that I can think of.  Simple, yet effective lessons.  In the end, working with Player.IO was fun and it definitely served its purpose, and the only thing keeping it from working perfectly for us was the learning curve.<br /><br />Knowing slightly more than I did before this game, and tons more than I know than when I worked with Jimmy and Leilani to put together <a href="http://nuubu.blogspot.com/2011/02/game-bonding-time.html">Bonding Time</a>, I am really excited to start my next game project. :D Just gotta think about what it will be.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I JUST WANT MY CITY to BE a CITY THAT I WOULD WANT to LIVE In]]></title>
    <link href="http://blog.neauro.com/blog/2011/05/07/i-just-want-my-city-to-be-city-that-i/"/>
    <updated>2011-05-07T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2011/05/07/i-just-want-my-city-to-be-city-that-i</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-vqWzQdSws0o/TcWB9GiSh0I/AAAAAAAAAMs/D9SC96y04vQ/s1600/tummy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="414" src="http://2.bp.blogspot.com/-vqWzQdSws0o/TcWB9GiSh0I/AAAAAAAAAMs/D9SC96y04vQ/s640/tummy.png" width="640" /></a></div><br />This is the new downtown area that I tried to clear up.  Before it was just a dense cluster of Country Homes, which are the first tier of housing that you can buy, and thus is the building that is presently the most useless to me.  I need more population in less space!  But something about bulldozing houses for Milan Apartments or Upscale Condos is a little uncomfortable.<br /><br />My most recent additions to the city of Tummy are a cheese store and a candle shop, which are named Tummy and Whey, and The Tummy At Both Ends, respectively.<br /><br />Anyway.<br /><br />Last week or so I attended the first <a href="https://convore.com/seattle-indies/info/">Seattle [Game Dev] Indies meetup</a> at The Capitol Club, which I walked past twice before actually discovering.  Though I cannot comfortably call myself an "indie" game dev (unless you count my research projects and the burgeoning Get Across), I wasn't quite sure what my place was, but in general just wanted to learn more about the community and see what new experiences I could make.  Everyone was nice (though some were understandably horrified that I have not yet played Portal 2, nay, have not even played the first Portal), even <a href="https://twitter.com/danctheduck">Dan</a> for some reason remembered me from my stint helping him take surveys for his game two years ago, and I was super happy to run into <a href="http://evolutionlive.blogspot.com/">Alex</a> again.  I learned about the tragedy of <a href="http://thesiteformerlyknownas.zachtronicsindustries.com/?p=713">Infiniminer</a>, that a lot of people are making abstract music games, that <a href="http://flixel.org/">Flixel</a> is much more widely used than I thought, that <a href="http://playerio.com/">Player.IO</a> really <em>is</em> the way to go for multiplayer Flash games, which is good, because we finally finished paper prototyping stage and started coding Get Across.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-chd51p9HCUE/TcWGkCvpGuI/AAAAAAAAAM0/iGuChDQnJeo/s1600/playerio.gif" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="74" src="http://1.bp.blogspot.com/-chd51p9HCUE/TcWGkCvpGuI/AAAAAAAAAM0/iGuChDQnJeo/s320/playerio.gif" width="199" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">you the bestest</td></tr></tbody></table><br />Working with Player.IO has been really simple and fun, though it's taking a while for me to wrap my head around noSQL and the whole "We don't have rows, we have objects!" thing.  I want to learn more about noSQL.  Is it faster than relational databases?  IS it still a relational databases?!  Somehow an initial Google search was fruitless.<br /><br />Some advantages of Player.IO:<br /><ul><li>I would have had no idea how to implement network stuff otherwise, and the given code and examples make it relatively easy</li><li>GUI is really nice!</li><li>I can view every item in my database and alter each one? &nbsp;Wat!</li><li>Database queries are all asynchronous, which makes them fast</li></ul><br />And some problems we've run into:<br /><ul><li>There are three people in our team, and when we are all working together, one of us will sometimes hang at the "joining a room" dialogue</li><li>Running into vague "InternalError" problems when loading/updating the database is a pain...nothing to do for it but wait until something works all of a sudden :/</li><li>Database queries are all asynchronous, which makes it so I get results back at weird/wrong times</li></ul><br />Not deal-breakers overall, and I'm getting more and excited.  GET ACROSS GO<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-_V8302bpk4c/TcWKi_BexSI/AAAAAAAAAM8/_qzw-qeRnow/s1600/getacross5_7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="237" src="http://1.bp.blogspot.com/-_V8302bpk4c/TcWKi_BexSI/AAAAAAAAAM8/_qzw-qeRnow/s320/getacross5_7.png" width="320" /></a></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incorporating ActionScript 3.0 Code With a Flex Project]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/30/incorporating-actionscript-30-code-with/"/>
    <updated>2011-01-30T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/30/incorporating-actionscript-30-code-with</id>
    <content type="html"><![CDATA[<div class='post'>
So my project of <a href="http://nuubu.blogspot.com/2010/12/problem-how-do-i-use-flex-components-to.html">incorporating Flex UI with an ActionScript project</a> has just become wanting to embed the entire ActionScript project into the Flex project, so that you don't need to use the <code>SWFLoader</code> at all to show the project.<br /><br />Luckily this is pretty easy.  As an example, take the code from a previous small project like <a href="http://nuubu.blogspot.com/2010/12/getting-sandy3d-312-working-on-flash.html">this Sandy project</a>, which does nothing but show a cone shape.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_SdPKamJbrgg/TPh_TU109CI/AAAAAAAAAAM/q_A6cDrKYGE/s1600/hellosandy.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267" src="http://2.bp.blogspot.com/_SdPKamJbrgg/TPh_TU109CI/AAAAAAAAAAM/q_A6cDrKYGE/s320/hellosandy.jpg" width="320" /></a></div><br /><pre class="brush: text">package<br />{<br />import flash.display.Sprite;<br />import flash.events.Event;<br /><br />import sandy.core.Scene3D;<br />import sandy.core.data.*;<br />import sandy.core.scenegraph.*;<br />import sandy.primitive.*;<br /><br />public class HelloSandy extends Sprite<br />{<br />private var scene:Scene3D;<br />private var camera:Camera3D;<br /><br />public function HelloSandy()<br />{<br />// We create the camera<br />camera = new Camera3D( 300, 300 );<br />camera.x = 0;<br />camera.y = 100;<br />camera.z = -400;<br />camera.lookAt(0,0,0);<br /><br />var root:Group = new Group;<br /><br />var myCone:Cone = new Cone("theObj1",50, 100);<br /><br />root.addChild(myCone);<br /><br />scene = new Scene3D( "scene", this, camera, root );<br /><br />addEventListener( Event.ENTER_FRAME, enterFrameHandler );<br />}<br /><br />// The Event.ENTER_FRAME event handler tells the world to render<br />private function enterFrameHandler( event : Event ) : void<br />{<br />scene.render();<br />}<br /><br />}<br />}</pre><br />Then, make a <strong>New Flex Project</strong> in Adobe Flash Builder, and make it so that it says this:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" <br />      xmlns:s="library://ns.adobe.com/flex/spark" <br />      xmlns:mx="library://ns.adobe.com/flex/mx"<br />                           minWidth="955" minHeight="600"<br />      creationComplete="initApp()"&gt;<br /><fx:script><br />  &lt;![CDATA[<br />   import mx.core.UIComponent;<br />   <br />   public function initApp():void {<br />    var myApp:HelloSandy = new HelloSandy();<br />    var container:UIComponent = new UIComponent();<br />    container.height = 600;<br />    container.left = 200;<br />    addElement(container);<br />    container.addChild(myApp);<br />   }<br />  ]]&gt;<br /> </fx:script><br /> <s:button label="Button" x="140" y="355"><br /></s:button><br /></pre><br />What this does:<br />Line 12: create a new instance of the ActionScript project, HelloSandy<br />Line 13: create a new instance of <code>UIComponent</code><br />Line 14, 15: change the height and position of the <code>UIComponent</code><br />Line 16: add the <code>UIComponent</code> to the <code>stage</code>, which handles the display of objects (a little more on the stage <a href="http://nuubu.blogspot.com/2011/01/flexas3-errors-with-stage-and-event.html">here</a>)<br />Line 17: add the HelloSandy object as a child to <code>UIComponent</code>, which will make it display<br /><br />The button is just there to show that I can still use Flex UI components.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_SdPKamJbrgg/TUXuuNoxXlI/AAAAAAAAAFA/99rs1S3w-zw/s1600/helloflexsandy.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="287" src="http://1.bp.blogspot.com/_SdPKamJbrgg/TUXuuNoxXlI/AAAAAAAAAFA/99rs1S3w-zw/s320/helloflexsandy.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">awwwww yeaahhh</td></tr></tbody></table><br /><br /><span class="sig">An extra note:</span><br />Once I did this with my real project (not the HelloSandy example above), I got this error:<br /><br /><code>Error #2044: Unhandled IOErrorEvent:. text=Error #2032: Stream Error URLStream</code><br /><br />I'm pretty sure it was because my "display" class, which was being added to the <code>UIComponent</code> had to make use of another class, which it made an instance of in its constructor.  This second class used <code>URLStream</code>, and got an error maybe because of variable scope.<br /><br />To solve this I basically just made a new instance of that second class, then passed it into the display class constructor, instead of letting the display class make an instance itself.<br /><br /><br />Sources:<br /><a href="http://livedocs.adobe.com/flex/3/html/help.html?content=components_04.html">Adobe: Using the UIComponent Class</a><br /><a href="http://www.judahfrangipane.com/blog/2007/01/01/error-2044-unhandled-ioerrorevent-texterror-2038-file-io-error/">judah's blog: Error #2044: Unhandled IOErrorEvent:. text=Error #2038: File I/O Error.</a></div>

]]></content>
  </entry>
  
</feed>
