<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qna | liwanag]]></title>
  <link href="http://neauro.github.io/blog/categories/qna/atom.xml" rel="self"/>
  <link href="http://neauro.github.io/"/>
  <updated>2014-01-08T20:13:04-08:00</updated>
  <id>http://neauro.github.io/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Things]]></title>
    <link href="http://neauro.github.io/blog/2012/08/20/javascript-things/"/>
    <updated>2012-08-20T00:00:00-07:00</updated>
    <id>http://neauro.github.io/blog/2012/08/20/javascript-things</id>
    <content type="html"><![CDATA[<div class='post'>
I get a little wary sometimes writing posts like these, especially since it involves copycatting other posts for sample code and etc. But...I just find that I learn better both a) working/writing out thoughts for myself; b) putting myself in a position of "teaching" in "public," where I become more thoughtful about what I'm doing and really understanding it; and, c) putting everything into a format like a blog post, where I can feel a modicum of success/productivity after posting. #realityissooobroken<br /><a href="http://stackoverflow.com/questions/2863435/front-end-developer-interview-questions"><br /></a><br /><h2><a href="http://stackoverflow.com/questions/2863435/front-end-developer-interview-questions">What is ECMAScript?</a></h2><a href="http://infrequently.org/2008/08/the-ecmajavascript-name-soup/">JavaScript</a>. <a href="http://www.dotnetguru2.org/sebastienros/index.php/2009/10/11/ecmascript-vs-javascript">ECMAScript 3 (EM3) is equivalent to JavaScript 1.5</a>, and is the best to program in for scripts that will run across various browsers (as of 2009). <a href="http://kangax.github.com/es5-compat-table/">This table</a>&nbsp;shows the existence of some EM5 functions for various browers.<br /><br /><br /><br /><h2>How do JavaScript functions deal with arguments?</h2>In JavaScript, every function has an argument list of variable length, so a function that takes and prints 1 argument can still be passed 3 arguments, and will complainlessly print out the first argument.<br /><br />A function can look at all the arguments its been passed by looking at an&nbsp;<code>arguments</code>&nbsp;object, which is like an array (with indexes, and a length, though you&nbsp;<em>can't</em>&nbsp;push/pop into it, or split it).<br /><br />Source:&nbsp;<a href="http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx">Function.apply and Function.call in JavaScript</a><br /><br /><br /><br /><h2>What's the difference between JavaScript <code>call</code> and <code>apply</code> functions?</h2>What <code>call</code> and <code>apply</code> do is change what the keyword <em>this</em> references at run-time.<br /><pre class="brush: js">x = 10;<br /><br /> function function_name() {<br />   alert(this.x);<br />  }<br /><br /> function();<br /></pre><br />In the previous, <code>this</code> references the global namespace, and the output is 10.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name() {<br />   alert(x);<br />  }<br /><br /> function();<br /> function.call(object);<br /></pre><br />This time, the first function call outputs 10, whereas the second function call outputs 15. <code>this</code> in the second function call uses <code>object</code> as the namespace, and refers to <code>object</code>'s value of <code>s</code>.<br /><br />You can also pass arguments to a function using <code>call</code>, as happens in the following.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name(message) {<br />   alert(message);<br />   alert(x);<br />  }<br /><br /> function("invoking f");<br /> function.call(object, "invoking f with a call");<br /></pre><br />Finally, what's the difference between <code>call</code> and <code>apply</code>? They both change the namespace at run-time, but <code>apply</code>'s second parameter always needs to be an array.<br /><br /><pre class="brush: js">x = 10;<br /> object = { x: 5 };<br /><br /> function function_name(message) {<br />   alert(message);<br />   alert(x);<br />  }<br /><br /> function("invoking f");<br /> function.apply(object, ["invoking f with an apply"]);<br /></pre><br />Apply is the more interesting of the two; because it can use an array, it can work with JavaScript's <code>arguments</code> object.<br /><br />Source: <a href="http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx">Function.apply and Function.call in JavaScript</a>, <a href="http://odetocode.com/Blogs/scott/archive/2007/07/06/putting-function-apply-to-work.aspx">Putting Function.apply() to work</a><br /><br /><br /><h2>What is currying?</h2><div>To curry is to take a function which accepts multiple arguments, and to convert it into one funtion that takes one argument and returns another function. The last thing returned should be the result.</div><div><br /></div><div>What are the advantages of currying? If functions are in a curried form, they may be easier to apply partially.&nbsp;Also, the parameters that have been "left out" when a function is curry-fied may not even be known at compile time, but will be at run time.</div><div><br /></div><div>In general it seems to be that currying in general is done out of convenience rather than necessity, to create simpler-looking methods.</div><div><br /></div><div>JavaScript uses closures to save the partial state</div><div><br /></div><div>Source: <a href="http://www.quora.com/What-is-currying">What is currying?</a>,&nbsp;<a href="http://www.quora.com/What-are-the-main-advantages-and-use-cases-of-currying">What are the main advantages and use-cases of currying?</a>,&nbsp;<a href="http://stackoverflow.com/questions/2725811/is-currying-just-a-way-to-avoid-inheritance/2725841#2725841">Is currying just a way to avoid inheritance?</a></div><div><br /></div><div><br /></div><h2>How do closures work in JavaScript?</h2>A closure describes a function, and the environment that contains the variables that the function can reference. Because the closure is a stack frame that is not deallocated when a function returns, it also contains the local variables that remain "alive" after a function has returned. A closure is used every time a function is declared within another function.<br /><br /><pre class="brush: js">function say_hello(name) {<br />    var hello = "hello";<br />    var hello_alert = function () { alert(hello + name); }; // closure created!<br />    return hello_alert;<br />  }<br />  <br />  hello_arupaka = say_hello(arupaka);<br />  hello_arupaka(); // alerts "hello arupaka";<br /></pre><br />In most languages, after a function (like <code>say_hello(arupaka)</code>) returns, the local variables are destroyed; but, when calling <code>hello_arupaka()</code>, the locally-created text "<code>arupaka</code>" is still available. Closures!<br /><br /><pre class="brush: js">function setup_globals() {<br />    var num = "3";<br /><br />    var alert_num = function () { alert(num); };<br />    var increment_num = function () { num++;  };<br />    var decrement_num = function () { num-- };<br />    return hello_alert;<br />  }<br /></pre><br />So what are the closures of <code>alert_num</code>, <code>increment_num</code>, and <code>decrement_num</code> above, and how do they relate? Because closures are set up every time a function is called within a function, they all have shared access to the same closure.<br /><br />Note: if you were to call <code>setup_globals</code> one more time, all the inside functions would be overwritten.<br /><br />Next closure example: what does <code>testList()</code> output?<br /><pre class="brush: js">function buildList(list) {<br />  var result = [];<br />  for (var i = 0; i &lt; list.length; i++) {<br />    var item = 'item' + list[i];<br />    result.push( function() {alert(item + ' ' + list[i])} );<br />  }<br />  return result;<br />}<br /><br />function testList() {<br />  var fnlist = buildList([1,2,3]);<br />  for (var j = 0; j &lt; fnlist.length; j++) {<br />    fnlist[j]();<br />  }<br />}</pre><br />Answer: 3 alerts, all of which read <code>item3 undefined</code>. This is because all functions created by <code>result.push( function() {alert(item + ' ' + list[i])} );</code> have shared access to the same closure. The array containing these functions in turn looks like this:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-9nusfNfzd0c/UDJU6Uy4hBI/AAAAAAAACOc/Xlifc7pySVs/s1600/closurearray.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img alt="an array with each cell containing alert(item + &quot; &quot; + list[i]);" border="0" height="147" src="http://2.bp.blogspot.com/-9nusfNfzd0c/UDJU6Uy4hBI/AAAAAAAACOc/Xlifc7pySVs/s400/closurearray.jpg" title="" width="400" /></a></div><br />And when <code>testList</code> calls <code>fnlist[j]()</code>,&nbsp;each&nbsp;<code>list[i]</code>&nbsp;uses the same value of <code>i</code> (which was incremented to 3) and <code>list[3]</code> is undefined. Each cell alerts <code>item3</code> because that was the last value assigned to <code> var item</code>.<br /><br />Source: <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work">How do JavaScript closures work</a>?, <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">Wikipedia: Closure</a>  <br /><br /><br /><h2>What's the difference between event bubbling and event capture?</h2>First: DOM (Document Object Model) is a convention for representing and interacting with objects in HTML, XHTML, and XML. When a page is rendered by a browser, that browser parses the HTML from the web server into an in-memory DOM. Different web browsers have their own internal model of DOM. The DOM views an HTML document <a href="http://www.w3schools.com/htmldom/dom_nodetree.asp">as a tree</a>.<br /><br />DOM events allow programming languages like JavaScript attach event handlers to tree nodes (different elements on a page), and react when users click/mouseover those nodes.<br /><br />So, what happens when you want to attach an event handler to a couple different elements on a webpage? Rather than define separate handlers for each element, you can have the events work with a node that contains those elements.<br /><br />In order to find the containing node, events need to be able to "propogate," or move through the DOM node tree. In event bubbling, the event is first handled at the inner most elements, and then propagated to the outer elements. (A great example of this is <a href="http://www.javascripter.net/faq/eventbubbling.htm">here</a>!) Event capturing is the opposite: the event is first handled by the outermost element, and then propagated to the inner-most element.<br /><br />Only event bubbling is supported by all major browsers.<br /><br />Sources: <a href="http://en.wikipedia.org/wiki/Document_Object_Model">Wikipedia: Document Object Model</a>, <a href="http://www.w3schools.com/htmldom/dom_nodetree.asp">W3Schools: HTML DOM Node Tree</a>, <a href="http://docstore.mik.ua/orelly/webprog/dhtml/ch06_05.htm">Event Propagation</a>, <a href="http://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing">StackOverflow: What is event bubbling and capturing?</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Q&a] Standard Annotation Language (SAL)]]></title>
    <link href="http://neauro.github.io/blog/2011/01/16/q-standard-annotation-language-sal/"/>
    <updated>2011-01-16T00:00:00-08:00</updated>
    <id>http://neauro.github.io/blog/2011/01/16/q-standard-annotation-language-sal</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="sig">What does <code>__inout</code>, etc. mean?</span><br />For OS I'm plumbing the depths of a Windows kernel and keep running into these things in the code that look like <code>__in</code>, or <code>__out</code>, or even <code>__inout</code>...for example:<br /><br /><pre class="brush:xml">NTKERNELAPI<br />VOID<br />FASTCALL<br />ExAcquireFastMutexUnsafe (<br />    __inout PFAST_MUTEX FastMutex<br />    );<br /></pre><br />I initially found <a href="http://nuubu.blogspot.com/2011/01/q-operating-systems-etc.html">something</a> about the usage of <code>_</code> and <code>__</code> in code, and it turns out that <code>__</code> is just an annotation which will help programmers know more about the intended usage of the code, like comments, and are ignored by the compiler.  <code>__inout</code> stuff is no different.<br /><br />These annotations are part of Microsoft's SAL, or, Standard Annotation Language, and define the proper use of buffers, which are regions of data that have been allocated and are represented as pointers.  If a pointer is pointing to a buffer, there's no good way to know how big a buffer is in compile time; with usage of SAL, you can make explicit exactly how big a buffer is.  It also helps to show how a function uses its parameters -- what it thinks that the parameter is, and what it will do with that parameter when it finishes.<br /><br />This is relevant because in C, a function can take a value or a pointer as an argument.  Arguments can be used as input (i.e. taking values to add together), or as output (i.e. taking a pointer to something which will store your output value.) But, if you were to leave out these annotations, you wouldn't know if an argument a function takes is supposed to be used as function input or output.<br /><br /><code>__in</code>, <code>__out</code>, and <code>__inout</code> are all examples of "Usage" annotations.<br /><br />So, if you see something like<br /><br /><pre class="brush: xml">void * memset(<br /> __out_bcount(s) char *p,<br /> __in int v, <br /> __in size_t s);<br /></pre><br />This means that the function <code>memset</code> expects variables <code>int v</code> and <code>size_t s</code> to be valid when the function is called (also called "valid on input").  Also, the buffer <code>char *p</code> will be initialized by this function, will be written to by this function, and will be valid when the function returns.<br /><br />In simpler terms -- <code>v</code> and <code>s</code> are definitely meant to be <code>memset</code>'s input, and <code>p</code> is meant to be the output.<br /><br /><br />Sources:<br /><a href="http://207.46.16.248/en-us/library/ff550230%28VS.85%29.aspx">MSDN: Overview of Annotations for Drivers</a><br /><a href="http://msdn.microsoft.com/en-us/library/ms235402%28v=vs.80%29.aspx">MSDN: SAL Annotations</a><br /><a href="http://blogs.msdn.com/b/michael_howard/archive/2006/05/19/602077.aspx">MSDN: A Brief Introduction to the Standard Annotation Language</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Q&a] Semaphore, Mutex]]></title>
    <link href="http://neauro.github.io/blog/2011/01/14/q-semaphore-mutex/"/>
    <updated>2011-01-14T00:00:00-08:00</updated>
    <id>http://neauro.github.io/blog/2011/01/14/q-semaphore-mutex</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="sig">What's a semaphore?</span><br />A semaphore is a procted variable or abstract data type.  It relates to controlling access to some resource shared by processes running simultaneously.  They're useful in preventing race conditions and deadlocks (though they don't prevent them completely).<br /><br />Semaphores don't keep track of which resources are free or who is using the resources; they only keep track of whether resources are free.  There are two types of semaphores: <b>counting semaphores</b> and <b>binary semaphores</b>.  Counting semaphores only keep track of how much of the resource is available at a given time (i.e. "all of my resources are being used up now...oh, someone came back, okay, now I have one free which you can use").  Binary semaphores only keep track of whether a resource is being used or not, i.e. whether it is presently unavailable or available.<br /><br />Semaphores can't prevent errors that occur if a process that has acquired a lock for the resource forgets to release the lock, etc.<br /><br />Also, errors can still happen if there are different resources managed by different semaphores and processes need to use more than one resource at a time.  An interesting thing: the <a href="http://en.wikipedia.org/wiki/Dining_philosophers_problem">dining philosophers problem</a>, which illustrates the problems with multiple processes sharing multiple resources.  Essentially, five philosophers are sitting at a table, either eating or thinking.  They each have a fork to their left and right, and there is a bowl of spaghetti in the middle of the table.  The philosophers need to serve themselves and eat spaghetti with both forks, but don't speak to each other, so one may pick up a left fork and wait for his right fork to become free so that he may eat.  Meanwhile, the guy using his right fork may be waiting for his own other fork to become free.  And so on, and so forth.<br /><br />A semaphore in this case would be like a person who is aware of which forks are being used and which ones are available, so that when the philosophers try to eat, they have to consult him first, and he'll tell them whether there are any forks to pick up which they can use.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_SdPKamJbrgg/TS9WBJzlB7I/AAAAAAAAAEk/QEHATD_NLWw/s1600/proceed%2Bcat.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="283" src="http://3.bp.blogspot.com/_SdPKamJbrgg/TS9WBJzlB7I/AAAAAAAAAEk/QEHATD_NLWw/s320/proceed%2Bcat.jpg" width="300" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">semaphore cat is semaphore</td></tr></tbody></table><br />One problem with semaphores: <strong>busy waiting</strong>, which is what you need to put into processes that are waiting for other processes to finish executing their critical section.  (Or, what philosophers are doing when they are waiting for their neighbors to finish eating.) The busy waiting is basically just a loop waiting for the mutex to free up, and it wastes CPU that another process could be productive with.  A process that does this is a <strong>spinlock</strong>, because "the process 'spins' while waiting for the lock."  Essentially, if a program knows it needs a lock before it does the next bit of code, it sits in a while loop until the needed lock is freed up.<br /><br /><br /><span class="sig">What's a mutex?</span><br />A mutex is essentially a binary semaphore, though mutex specifically describes an abstraction which prevents two processes from executing the same piece of code or accessing the same data at the same time.  Basically, it limits access to a single resource, to one "owner" who is at that time allowed to do whatever it wants with it before releasing the mutex so someone else can do something.<br /><br /><br /><span class="sig">What does IRQL mean?</span><br />IRQL stands for Interrupt Request Level, and has something to do with a process, and, given incoming interrupts, which one of those interrupts should be able to interrupt the running process, and which should not.  For instance, if you're just quickly trying to modify a single variable, then you don't want anything to interrupt you.<br /><br />Basically (I think), each thread has its own IRQL.  If the OS receives another thread to run which has a higher IRQL than that first thread, however, then it will pause the lower-IRQL thread to run the higher-IRQL code.  Weird deadlocks may occur in this case, however, if:<br /><ol><li>lower-IRQL thread is running, and acquires a lock</li><li>lower-IRQL thread is interrupted; higher-IRQL thread begins execution</li><li>higher-IRQL thread needs the lock that lower-IRQL thread has</li><li>higher-IRQL lock cannot continue without that lock</li><li>lower-IRQL thread cannot continue without higher-IRQL finishing execution</li></ol>So, what you would want to do in this case is make sure that a thread that obtains a lock cannot be interrupted.<br /><br />If it does so happen that you don't want any interrupts to your thread, then make sure that the IRQL is raised to <code>APC_LEVEL</code>.  This level is pretty much only run when you're using Fast Mutexes.  Part of the reason why Fast Mutexes are faster than normal Mutexes in the Windows kernel is because they deny APC interrupts.  APC interrupts originate from the processor, toward itself or another processor.<br /><br /><br /><span class="sig">How do I use a mutex in the Windows NT kernel?</span><br /><a href="http://www-user.tu-chemnitz.de/~heha/oney_wdm/ch04f.htm">Here's</a> a start...<br /><br /><br />Sources:<br /><a href="http://en.wikipedia.org/wiki/Semaphore_%28programming%29">Wikipedia: Semaphore (programming)</a><br /><a href="http://us.generation-nt.com/answer/fast-mutexes-guarded-mutexes-help-27627542.html">GNT: Fast mutexes and guarded mutexes?</a><br /><a href="http://blogs.technet.com/b/askperf/archive/2009/07/21/the-basics-of-mutexes-and-spin-locks.aspx">TechNet: The Basics of Mutexes and Spin Locks</a><br /><a href="http://blogs.msdn.com/b/doronh/archive/2010/02/02/what-is-irql.aspx">MSDN: What is IRQL?</a><br /><a href="http://www.google.com/url?sa=t&amp;source=web&amp;cd=1&amp;ved=0CBMQFjAA&amp;url=http%3A%2F%2Fdownload.microsoft.com%2Fdownload%2Fe%2Fb%2Fa%2Feba1050f-a31d-436b-9281-92cdfeae4b45%2FLocks.doc&amp;rct=j&amp;q=ex%20initialize%20fast%20mutex%20example&amp;ei=yJEzTf7ILIGqsAP4rqiFBg&amp;usg=AFQjCNEWYt0oNPRzKd8sXHFsm_CgrHKZBw&amp;sig2=4FQ-QHdGlj_42VPdrKqIxA&amp;cad=rja">Windows Hardware and Driver Central: Locks, Deadlocks, and Synchronization</a><br /><em>Operating System Concepts (8th Edition)</em>, Silberschatz, Galvin and Gagne, ISBN 978-0-470-12872-5.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Q&a] Operating Systems, C, Etc.]]></title>
    <link href="http://neauro.github.io/blog/2011/01/06/q-operating-systems-etc/"/>
    <updated>2011-01-06T00:00:00-08:00</updated>
    <id>http://neauro.github.io/blog/2011/01/06/q-operating-systems-etc</id>
    <content type="html"><![CDATA[<div class='post'>
<b>How do you switch drives with Windows command line?</b><br />If you want to go to drive <code>Z:</code>, rather than <code>cd Z:</code>, you can just type <code>Z:</code>.<br /><br /><br /><b>What do you do when you demux something?</b><br />A demultiplexer is a device that takes a single input signal and routes it to one of many output lines.  It's often used with a multiplexer on the sending end.  So, when you demux a signal, you accept it, and then based on some parameter send it to a different function or something. <span class="shh">I think?</span><br /><br /><br /><b>What's a virtual machine?</b><br />"A software implementation of a programmable machine" -- so, a simulation of a computer, on a computer.<br /><br /><br /><b>What's the difference between a function in C and a method in Java?</b><br />All C/C++ programs require a function named <code>main</code> and besides that can have numerous other functions.  In Java, functions can't stand by themselves -- they have to be part of a class.  Functions that are part of a class are usually called methods.<br /><br />Also, it seems that methods are called by reference values, which are objects, perhaps like <code>Object.method()</code>, as opposed to just <code>value = function()</code>?  Also, "method" is used more often in Java, most likely because Java has objects and C/C++ does not.<br /><br /><br /><b>What's Windows NT?</b><br />It's a family of operating systems created by Microsoft, which were meant to complement consumer versions of Windows that were based on MS-DOS.  NT was the first fully 32-bit version of Windows.  Windows 2000, Windows XP, Windows Server 2003, Windows Vista, Windows 7, etc., are based on Windows NT, though they aren't branded the same way.  NT was once expanded to mean "New Technology" and stood originally for "N-Ten," the codename of the Intell i860 XR processor that the OS was originally developed for, but NT has no particular meaning anymore.  Sidenote: it is really confusing that there's an operating system called Windows <i>Server</i> 2003.  <i>Wat.</i>  I guess this calls into question what exactly a server is supposed to be.<br /><br /><br /><b>What is a server?</b><br />A server can refer to:<br /><ul><li>a computer program running as <a href="http://nuubu.blogspot.com/2011/01/intro-to-distributed-systems.html">a service</a>, to serve the needs or requests of other programs</li><li>a physical computer running one or more such services, to serve the needs of programs running on other computers in the same network</li><li>a software/hardware system such as a database server, file server, mail server, print server</li></ul>I guess server operating systems are operating systems that have certain features which make them good servers -- such as limited GUI, flexible/advanced networking capability, tight security, backup securities, transparent data transfer between different volumes or devices -- and maybe that's what the Windows Server operating systems are all about.<br /><br /><br /><b>How do you press Ctrl+Alt+Delete in a virtual machine?</b><br />In a virtual machine in MS Virtual PC 2007, rather than pressing the keys, go to the <code>Action</code> tab and select <code>Ctrl+Alt+Delete</code>.<br /><br /><br /><b>What does the <code>_</code> or <code>__</code> mean in C programs?</b><br />There's no particular meaning.  <code>_</code> is meant to identify system variables/functions, <code>__</code> is meant to identify metadata.  Additionally, when you include headers in C, you <br />add in a lot of code and functions and variables; to prevent these imported names from causing duplicates with the variables/names of your own stuff, it's best to avoid using variables/functions which start with underscores in your own program.<br /><br /><br /><br /><br />Source:<br />Jimmy<br />Wikipedia: <a href="http://en.wikipedia.org/wiki/Multiplexer">1</a>, <a href="http://en.wikipedia.org/wiki/Virtual_machine">2</a>, <a href="http://en.wikipedia.org/wiki/Windows_NT">3</a>, <a href="http://en.wikipedia.org/wiki/Server_%28computing%29">4</a><br /><a href="http://www.geekinterview.com/question_details/31163">GeekInterview: What is the difference between methods and functions?</a><br /><a href="http://www.dickbaldwin.com/java/Java008.htm">Dick Baldwin: Similarities and Differences between Java and C++</a><br /><a href="http://bytes.com/topic/c/answers/540408-_-__-significance">Bytes: _ and __ significance</a></div>

]]></content>
  </entry>
  
</feed>
