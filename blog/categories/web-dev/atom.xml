<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Dev | miscware]]></title>
  <link href="http://blog.neauro.com/blog/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-12-02T07:48:52-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blurring Things With Javascript]]></title>
    <link href="http://blog.neauro.com/blog/2014/02/26/blurring-with-javascript/"/>
    <updated>2014-02-26T15:11:18-08:00</updated>
    <id>http://blog.neauro.com/blog/2014/02/26/blurring-with-javascript</id>
    <content type="html"><![CDATA[<p>Recently I was investigating different Javascript libraries for blurring things on mobile. In this case, blurring would act to obscure an image from the user.</p>

<h3><a href="http://blurjs.com/?bg=1">Blur.js</a></h3>


<p>Pros:</p>

<ul>
<li>It's easy; plug and play. It also supports draggable elements (<a href="http://blurjs.com/simpledemo.html">and has a neat demo proving it</a>)</li>
<li>You can specify your overlay color and blur radius, and it even supports caching.</li>
<li>More hackproof; since (on first glance) it seems to replace your original image entirely, you can't easily unblur it using developer tools.</li>
</ul>


<p>Cons:</p>

<ul>
<li>When I used this library for a div with a background-image, the entire image wasn't blurred out; only part of it. It didn't play nicely with my background-image having a <code>background-size:cover</code> style.</li>
<li>Doesn't seem to work for blurring text or colored divs; just elements with some image aspect.</li>
<li>You need to provide a "source" of blurring for some reason.</li>
</ul>




<h3><a href="http://nbartlomiej.github.io/foggy/">Foggy</a></h3>


<p>Pros:</p>

<ul>
<li>Uses the CSS "filter" and falls back to a "manual blur" if the browser doesn't support it.</li>
<li><em>Really</em> simple; at the most basic level, all you need is <code>$(".selector").foggy()</code></li>
<li>It worked on mobile Safari! (And I haven't yet tested it with anything else.)</li>
<li>You can also unblur blurred objects!</li>
</ul>


<p>Cons:</p>

<ul>
<li>The manual blur creates duplicates of elements, so it could be pretty expensive? Especially for a mobile web app, my specific use case. (In my brief tests, I didn't notice any particular behavior downgrade.)</li>
<li>You could "hack" this by inspecting elements to see what the original image is.</li>
</ul>


<p>I ended up using Foggy so that I could grab multiple elements with one selector to blur (rather than needing to iterate through each and supply each one with its own &ldquo;source&rdquo;). Also, &ldquo;hacking&rdquo; via a developer tool is less of a risk. and, honestly, it just worked more quickly, though I do love the layout of Blur&rsquo;s page better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing for Opera Mini]]></title>
    <link href="http://blog.neauro.com/blog/2014/01/21/opera-mini/"/>
    <updated>2014-01-21T10:38:15-08:00</updated>
    <id>http://blog.neauro.com/blog/2014/01/21/opera-mini</id>
    <content type="html"><![CDATA[<p>It came to my attention recently that not only are the majority of the users for one of my projects using Opera Mini, but that Opera Mini has a Very Special way of dealing with Javascript.</p>

<p>From <a href="http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#javascript">their authoring guidelines</a>:</p>

<blockquote>
while Mini supports JavaScript just as well as Opera Desktop, interactivity is somewhat more limited. When the user clicks a link or a button, then the Mini client sends that information back to the server, where the server performs the associated action (such as loading a new page, executing some JavaScript, etc.).
<br/><br/>
For authors, the upshot of all this is that once a page has been rendered by the server, it won't change until the user does something on that and there is no way for scripts to run in the background. The user must do something to make Mini talk to the server in order for JavaScript to be unpaused. As a result, you cannot expect things like JavaScript animations or timed Ajax updates to work in the background as they would on a desktop browser.
<br/><br/>
JavaScript running on the Mini server will only run for a couple of seconds before pausing, for resource constraint reasons. This applies to JavaScript run due to an event firing e.g. onload, as well as code run because of a user action.</blockquote>


<p>I&rsquo;m still working on getting it properly working, which seems impossible given the bulk of Javascript used in this case and its heavy reliance on Ajax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running IE7, IE8, and IE9 on a Mac, Using VirtualBox]]></title>
    <link href="http://blog.neauro.com/blog/2014/01/08/virtualbox/"/>
    <updated>2014-01-08T09:07:20-08:00</updated>
    <id>http://blog.neauro.com/blog/2014/01/08/virtualbox</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been putting off getting a virtual machine running on the Mac computer I use for work, mostly because I wanted to forget the existence of &lt;IE9 browsers entirely. Unfortunately, the visual bugs accumulating across my projects were starting to get a little ridiculous.</p>

<p><img class="book-cover" src="/images/proleft.png" alt="Screenshot of IE8 errors"/></p>

<p class="caption">omg why</p>


<p>After some hours of searching and fiddling, I discovered my favorite solution for running IE on a Mac. It goes like this:</p>

<ol>
<li>Download the relevant/recent version of Oracle's <a href="http://www.virtualbox.org">VirtualBox</a>.</li>
<li>Use the Terminal and and run <code>curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | env IEVMS_VERSIONS="8 9" bash</code> to download 2 virtual machines; one that can run IE8, and one that can run IE9.</li>
</ol>


<p>That&rsquo;s it! Once that&rsquo;s finished, you can open VirtualBox and you&rsquo;ll see your boxes all ready to go.</p>

<p><img class="book-cover" src="/images/virtualbox.png" alt="Screenshot of IE8 in VirtualBox"/></p>

<p class="caption">only IE8 is pictured above</p>


<p>Thanks to <a href="http://osxdaily.com/2011/09/04/internet-explorer-for-mac-ie7-ie8-ie-9-free/">OSXDaily</a> for the post that led me to finding <a href="https://github.com/xdissent">xdissent</a>&rsquo;s awesome installations.</p>

<p>Other notes:</p>

<ul>
<li><code>border-radius</code>, <code>rem</code>, and <code>opacity</code> are some of the many words not recognized by IE8.</li>
<li>PressF12 to open up IE8's Developer Tools.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I've Been Doing Some Mobile Web Work Recently.]]></title>
    <link href="http://blog.neauro.com/blog/2013/07/25/ive-been-doing-some-mobile-web-work/"/>
    <updated>2013-07-25T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2013/07/25/ive-been-doing-some-mobile-web-work</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="p1">I'm unenthusiastic when it comes to designing websites for small screens like phones, probably because I don't have a smartphone. (No particular reason why — just that my 6-year-old palm-sized brick of a phone is sturdy and unexciting to steal, and I plan on staying with it as long as it stays with me.)</div><div class="p2"><br /></div><div class="p1"><a href="http://jquerymobile.com/">jQuery Mobile</a>&nbsp;is what I've been learning recently; it is a "mobile framework" and "HTML5-based user interface system," which means that you can</div><ul class="ul1"><li class="li1">stick it in your project</li><li class="li1">throw in some common "mobile" UI elements like headers and buttons, or even switches</li><li class="li1">have those buttons be styled to look pretty good already!</li></ul><div class="p2"><br /></div><div class="p1">Function-wise, you can also use jQuery Mobile to</div><ul class="ul1"><li class="li1"><a href="http://jquerymobile.com/demos/1.2.0/docs/pages/page-transitions.html">transition very prettily between pages and dialog boxes</a></li><li class="li1">easily support <a href="http://stackoverflow.com/questions/4176844/can-someone-explain-the-html5-aria-attribute">ARIA attributes</a>&nbsp;for better accessibility across your UI elements</li></ul><br />jQuery mobile was confusing for me at first because I would write simple markup, but when viewing it online, my bare elements would suddenly have tons upon tons of classes — a div with a class of <code>mobile-header</code>, for example, would suddenly be a div with the classes <code>mobile-header ui-header ui-bar-a</code>, and would also have a <code>data-role="header"</code> as well. Links in my <code>mobile-header</code> would have also been transformed into elements with tons of classes: <code>icon ui-btn-left ui-btn ui-btn-up-a ui-shadow ui-btn-corner-all</code>…<br /><br /><div class="p1">Which brings me to my next point about jQuery Mobile: it is a <i>pain</i> to style into your theme. Because elements can be so deeply nested, it's hard to figure out what exactly is making all of my links black when they should be blue, and so on. Trying to make a link blue may require that you overwrite not just one style but two. jQuery provides a <a href="http://jquerymobile.com/themeroller/index.php">theme roller</a>&nbsp;which you can use to change the default black style downloaded in the package, but as the things I want to make are radically different than the rounded, chrome buttons they offer, a theme roller doesn't help much.</div><div class="p2"><br /></div><div class="p1">Regarding getting started, I found that <a href="http://thehungrycoder.com/jquery/jquery-mobile/jquery-mobile-part-1-making-your-first-mobile-page.html">this blog post</a>&nbsp;and the ones following were quite helpful. Additionally, this link on <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu">Rethinking the mobile web</a>&nbsp;is a great primer on why developing for the mobile web is important (despite all my eye-rolling/teeth-gnashing) and gives data and another perspective on "mobile-first" design processes.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Have a New Portfolio!]]></title>
    <link href="http://blog.neauro.com/blog/2013/07/25/i-have-new-portfolio/"/>
    <updated>2013-07-25T00:00:00-07:00</updated>
    <id>http://blog.neauro.com/blog/2013/07/25/i-have-new-portfolio</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-0FbqJ-cYSWY/UfHTOt3KZTI/AAAAAAAADwI/LEtsox-4SGg/s1600/Screen+Shot+2013-07-23+at+Tue,+Jul23,+2013.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="488" src="http://4.bp.blogspot.com/-0FbqJ-cYSWY/UfHTOt3KZTI/AAAAAAAADwI/LEtsox-4SGg/s640/Screen+Shot+2013-07-23+at+Tue,+Jul23,+2013.png" width="640" /></a></div><br /><br />It is partially inspired by <a href="http://blog.alexcornell.com/the-worst-portfolio-ever">The Worst Portfolio Ever</a> (many elements of which my <a href="http://nuubu.blogspot.com/2012/12/new-portfolio-layout-woo.html">last design</a> shared, such as "a big pretty picture on top that means nothing," haha).<br /><br />My goals this time were to:<br /><ul><li>actually talk about my projects</li><li>show more pictures of my projects</li><li>add some more fun things — like my cosplay, or pictures of Alpacasso</li><li>use new things I've learned — such as CSS transitions and Bootstrap</li></ul><div><a href="http://neauro.com/">Success!</a></div></div>

]]></content>
  </entry>
  
</feed>
