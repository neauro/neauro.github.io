<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webdev | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/webdev/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-02-26T09:11:38-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developing for Opera Mini]]></title>
    <link href="http://blog.neauro.com/blog/2014/01/21/opera-mini/"/>
    <updated>2014-01-21T10:38:15-08:00</updated>
    <id>http://blog.neauro.com/blog/2014/01/21/opera-mini</id>
    <content type="html"><![CDATA[<p>It came to my attention recently that not only are the majority of the users for one of my projects using Opera Mini, but that Opera Mini has a Very Special way of dealing with Javascript.</p>

<p>From <a href="http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#javascript">their authoring guidelines</a>:</p>

<blockquote>
while Mini supports JavaScript just as well as Opera Desktop, interactivity is somewhat more limited. When the user clicks a link or a button, then the Mini client sends that information back to the server, where the server performs the associated action (such as loading a new page, executing some JavaScript, etc.).
<br/><br/>
For authors, the upshot of all this is that once a page has been rendered by the server, it won't change until the user does something on that and there is no way for scripts to run in the background. The user must do something to make Mini talk to the server in order for JavaScript to be unpaused. As a result, you cannot expect things like JavaScript animations or timed Ajax updates to work in the background as they would on a desktop browser.
<br/><br/>
JavaScript running on the Mini server will only run for a couple of seconds before pausing, for resource constraint reasons. This applies to JavaScript run due to an event firing e.g. onload, as well as code run because of a user action.</blockquote>


<p>I&rsquo;m still working on getting it properly working, which seems impossible given the bulk of Javascript used in this case and its heavy reliance on Ajax.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running IE7, IE8, and IE9 on a Mac, Using VirtualBox]]></title>
    <link href="http://blog.neauro.com/blog/2014/01/08/virtualbox/"/>
    <updated>2014-01-08T09:07:20-08:00</updated>
    <id>http://blog.neauro.com/blog/2014/01/08/virtualbox</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been putting off getting a virtual machine running on the Mac computer I use for work, mostly because I wanted to forget the existence of &lt;IE9 browsers entirely. Unfortunately, the visual bugs accumulating across my projects were starting to get a little ridiculous.</p>

<p><img class="book-cover" src="/images/proleft.png" alt="Screenshot of IE8 errors"/></p>

<p class="caption">omg why</p>


<p>After some hours of searching and fiddling, I discovered my favorite solution for running IE on a Mac. It goes like this:</p>

<ol>
<li>Download the relevant/recent version of Oracle's <a href="http://www.virtualbox.org">VirtualBox</a>.</li>
<li>Use the Terminal and and run <code>curl -s https://raw.github.com/xdissent/ievms/master/ievms.sh | env IEVMS_VERSIONS="8 9" bash</code> to download 2 virtual machines; one that can run IE8, and one that can run IE9.</li>
</ol>


<p>That&rsquo;s it! Once that&rsquo;s finished, you can open VirtualBox and you&rsquo;ll see your boxes all ready to go.</p>

<p><img class="book-cover" src="/images/virtualbox.png" alt="Screenshot of IE8 in VirtualBox"/></p>

<p class="caption">only IE8 is pictured above</p>


<p>Thanks to <a href="http://osxdaily.com/2011/09/04/internet-explorer-for-mac-ie7-ie8-ie-9-free/">OSXDaily</a> for the post that led me to finding <a href="https://github.com/xdissent">xdissent</a>&rsquo;s awesome installations.</p>

<p>Other notes:</p>

<ul>
<li><code>border-radius</code>, <code>rem</code>, and <code>opacity</code> are some of the many words not recognized by IE8.</li>
<li>PressF12 to open up IE8's Developer Tools.</li>
</ul>

]]></content>
  </entry>
  
</feed>
