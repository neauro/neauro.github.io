<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flex | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/flex/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-01-13T21:23:27-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Incorporating ActionScript 3.0 Code With a Flex Project]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/30/incorporating-actionscript-30-code-with/"/>
    <updated>2011-01-30T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/30/incorporating-actionscript-30-code-with</id>
    <content type="html"><![CDATA[<div class='post'>
So my project of <a href="http://nuubu.blogspot.com/2010/12/problem-how-do-i-use-flex-components-to.html">incorporating Flex UI with an ActionScript project</a> has just become wanting to embed the entire ActionScript project into the Flex project, so that you don't need to use the <code>SWFLoader</code> at all to show the project.<br /><br />Luckily this is pretty easy.  As an example, take the code from a previous small project like <a href="http://nuubu.blogspot.com/2010/12/getting-sandy3d-312-working-on-flash.html">this Sandy project</a>, which does nothing but show a cone shape.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_SdPKamJbrgg/TPh_TU109CI/AAAAAAAAAAM/q_A6cDrKYGE/s1600/hellosandy.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267" src="http://2.bp.blogspot.com/_SdPKamJbrgg/TPh_TU109CI/AAAAAAAAAAM/q_A6cDrKYGE/s320/hellosandy.jpg" width="320" /></a></div><br /><pre class="brush: text">package<br />{<br />import flash.display.Sprite;<br />import flash.events.Event;<br /><br />import sandy.core.Scene3D;<br />import sandy.core.data.*;<br />import sandy.core.scenegraph.*;<br />import sandy.primitive.*;<br /><br />public class HelloSandy extends Sprite<br />{<br />private var scene:Scene3D;<br />private var camera:Camera3D;<br /><br />public function HelloSandy()<br />{<br />// We create the camera<br />camera = new Camera3D( 300, 300 );<br />camera.x = 0;<br />camera.y = 100;<br />camera.z = -400;<br />camera.lookAt(0,0,0);<br /><br />var root:Group = new Group;<br /><br />var myCone:Cone = new Cone("theObj1",50, 100);<br /><br />root.addChild(myCone);<br /><br />scene = new Scene3D( "scene", this, camera, root );<br /><br />addEventListener( Event.ENTER_FRAME, enterFrameHandler );<br />}<br /><br />// The Event.ENTER_FRAME event handler tells the world to render<br />private function enterFrameHandler( event : Event ) : void<br />{<br />scene.render();<br />}<br /><br />}<br />}</pre><br />Then, make a <strong>New Flex Project</strong> in Adobe Flash Builder, and make it so that it says this:<br /><pre class="brush: xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" <br />      xmlns:s="library://ns.adobe.com/flex/spark" <br />      xmlns:mx="library://ns.adobe.com/flex/mx"<br />                           minWidth="955" minHeight="600"<br />      creationComplete="initApp()"&gt;<br /><fx:script><br />  &lt;![CDATA[<br />   import mx.core.UIComponent;<br />   <br />   public function initApp():void {<br />    var myApp:HelloSandy = new HelloSandy();<br />    var container:UIComponent = new UIComponent();<br />    container.height = 600;<br />    container.left = 200;<br />    addElement(container);<br />    container.addChild(myApp);<br />   }<br />  ]]&gt;<br /> </fx:script><br /> <s:button label="Button" x="140" y="355"><br /></s:button><br /></pre><br />What this does:<br />Line 12: create a new instance of the ActionScript project, HelloSandy<br />Line 13: create a new instance of <code>UIComponent</code><br />Line 14, 15: change the height and position of the <code>UIComponent</code><br />Line 16: add the <code>UIComponent</code> to the <code>stage</code>, which handles the display of objects (a little more on the stage <a href="http://nuubu.blogspot.com/2011/01/flexas3-errors-with-stage-and-event.html">here</a>)<br />Line 17: add the HelloSandy object as a child to <code>UIComponent</code>, which will make it display<br /><br />The button is just there to show that I can still use Flex UI components.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_SdPKamJbrgg/TUXuuNoxXlI/AAAAAAAAAFA/99rs1S3w-zw/s1600/helloflexsandy.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="287" src="http://1.bp.blogspot.com/_SdPKamJbrgg/TUXuuNoxXlI/AAAAAAAAAFA/99rs1S3w-zw/s320/helloflexsandy.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">awwwww yeaahhh</td></tr></tbody></table><br /><br /><span class="sig">An extra note:</span><br />Once I did this with my real project (not the HelloSandy example above), I got this error:<br /><br /><code>Error #2044: Unhandled IOErrorEvent:. text=Error #2032: Stream Error URLStream</code><br /><br />I'm pretty sure it was because my "display" class, which was being added to the <code>UIComponent</code> had to make use of another class, which it made an instance of in its constructor.  This second class used <code>URLStream</code>, and got an error maybe because of variable scope.<br /><br />To solve this I basically just made a new instance of that second class, then passed it into the display class constructor, instead of letting the display class make an instance itself.<br /><br /><br />Sources:<br /><a href="http://livedocs.adobe.com/flex/3/html/help.html?content=components_04.html">Adobe: Using the UIComponent Class</a><br /><a href="http://www.judahfrangipane.com/blog/2007/01/01/error-2044-unhandled-ioerrorevent-texterror-2038-file-io-error/">judah's blog: Error #2044: Unhandled IOErrorEvent:. text=Error #2038: File I/O Error.</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do You Make a Flex Application Send Data to a PHP Server?]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/30/how-do-you-make-flex-application/"/>
    <updated>2011-01-30T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/30/how-do-you-make-flex-application</id>
    <content type="html"><![CDATA[<div class='post'>
How do you make a Flex project able to read/write files?<br />There are a couple objects like <code>File</code> and <code>FileStream</code> which make it so that an Adobe AIR application can access the user's filesystem, but to send and load data from a server, you can use <code>URLLoader</code>, <code>URLRequest</code>, and <code>URLVariables</code>.<br /><br />A summary:<ul><li><strong>URLLoader</strong> downloads data from a URL as text, binary data, or URL-encoded variables.  It's useful for downloading textfiles, XML, etc. to be used in a data-driven application.  So: it's for use by a Flash application to retrieve data from a URL.</li><li><strong>URLRequest</strong> is an object which contains all of the information in one HTTP request.  It initiates URL downloads by being passed to the <code>load()</code> methods of <code>Loader, URLLoader</code> classes.  Note: By default you can only load data if the application loading and the URL it's loading from at in the same domain.  So an application on whatever.com can only load data from somewhere else on whatever.com.</li><li><strong>URLVariables</strong> allow you to transfer variables between an application and a server.  It's used with methods of the <code>URLLoader</code> class, with the <code>data</code> property of the <code>URLRequest</code> class, and additional functions in the <code>flash.nete</code> package.</li></ul><br />Basic workflow goes like:<ol><li>In the Flash/Flex application, create an instance of <code>URLVariables</code>, and add variables to it.  For instance, if you want to be able to retrieve data associated with "username," you'll want to do something like <code>URLVariablesObject.username = "username"</code></li><li>Make a page on your server which will extract the variables and work with them.  For example, a page <code>login.php</code>, with code like <code>$username = $_POST["username"]</code></li><li><code>URLRequest</code> contains the data you want to send to the server.  Specify the URL of the server page you want to send data to, set its <code>data</code> to be your URLVariables object, and set its <code>method</code> to be <code>URLRequestMethod.POST</code> if you want to send data to the server page as POST.</li><li><code>URLLoader</code> sends the <code>URLRequest</code> to the server and handles the return.  Create an instance of <code>URLLoader</code>, specify its <code>dataFormat</code> to be that of <code>URLLoaderDataFormat.VARIABLES</code>, and then use the <code>load</code> function to load the <code>URLRequest</code> object specifed earlier.  Add event listeners to handle what happens when the data has been sent to the URL, and what happens if there is an error loading the URL.</li><li>Make server page read the URLVariables with something that looks like <code>$username = $_POST["username"];</code></li></ol><br />A good way to send data to a server page is to wrap up the <code>URLRequest</code> and <code>URLLoader</code> stuff into one class or function, which will receive only the url to send the data to, and URLVariables to send.<br /><br />So, here's an example which sends a simple "test" string to some server page somewhere.  If it's a success, it changes a <code>Label</code> to say so, and if it's an error, it changes a <code>Label</code> to say that too.  (I've pretty much taken and only slightly altered from <a href="http://tush.wordpress.com/2007/07/20/actionscript-3-using-urlloader-to-send-and-load-server-variables/">another blog</a>):<br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br /><s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" <br />      xmlns:s="library://ns.adobe.com/flex/spark" <br />      xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"><br /> <fx:Script><br />  &lt;![CDATA[<br />   // send test data to server page<br />   protected function sendDataToServer(event:MouseEvent):void<br />   {<br />    var request:URLRequest = new URLRequest(sendToURL);<br />    var loader:URLLoader = new URLLoader();<br />    var variables:URLVariables = new URLVariables();<br />  <br />    variables.test = "test";<br />    loader.dataFormat = URLLoaderDataFormat.TEXT;<br />    request.data = variables;<br />    request.method = URLRequestMethod.POST;<br />    loader.addEventListener(Event.COMPLETE, onSuccess);<br />    loader.addEventListener(IOErrorEvent.IO_ERROR, onError);<br />    loader.load(request);<br />    sendDataToServerLabel.text= "Data sent: '" + variables.test + "'";<br />   }<br /> <br /><br />   // called when URLLoader returns successfully<br />   // prints parameters and messages of event<br />   private function onSuccess(event:Event):void<br />   {<br />    var loader:URLLoader = URLLoader(event.target);<br />    dataReceivedLabel.text = "Data received by server: success!"<br />   }<br />   <br />   // called when URLLoader returns unsucessfully<br />   // prints error message<br />   private function onError(event:IOErrorEvent):void<br />   {<br />    dataReceivedLabel.text = "Error loading URL.";<br />   }<br />  ]]&gt;<br /> </fx:Script><br /><s:Label x="715" y="444" id="dataReceivedLabel"/><br /></pre><br /><span class="sig">Possible errors:</span><br /><code>Error: Error #2101: The String passed to URLVariables.decode() must be a URL-encoded query string containing name/value pairs.</code><br /><br />I got this error fixed after changing this line --<br /><br /><code>loader.dataFormat = URLLoaderDataFormat.VARIABLES;</code><br /><br />to<br /><br /><code>loader.dataFormat = URLLoaderDataFormat.TEXT;</code><br /><br />What this does (I think) is makes it so that the returning HTML page data from the server page is encoded into a <code>TEXT</code> type instead of a <code>VARIABLES</code> type.  That Flash can't reconstruct the HTML data into <code>VARIABLES</code> seems to be a known error, and all you can do now is convert the returning HTML data into <code>TEXT</code>, and then into <code>VARIABLES</code> pairs.<br /><br /><br /><br /><span class="sig">How do you send an array to a PHP page?</span><br />For now, I just want a PHP file on the webserver to take the data the Flex app gives it, and then write it to a file.  The <code>variables</code> object (of type <code>URLVariables</code>)  <br />above has a "<code>test</code>" field, which I can retrieve easily in PHP by writing something like <code>$var = $_POST["test"]</code>, but I guess if you want to send an array this way, the easiest way to do it would be to first format the array.  i.e.<ol><li>In Flex, convert the array to a string</li><li>In PHP, retrieve the array, and then split the string and use it.</li></ol><br />Alternatively, you could use <code><a href="http://livedocs.adobe.com/flex/3/html/data_access_2.html">HTTPService</a></code> (which also works with Rails, wooo).  But reading about it in the Adobe documentation, it seems that <code>HTTPService</code> might be more useful for when you're working with PHP and a database and want to perform queries or format query results.  All I want to do is send an array of points (each containing x, y, and z) coordinates over, so...splitting and joining stuff up in PHP it is.<br /><br /><br /><br />Sources: <br />Adobe: <a href="http://livedocs.adobe.com/flex/3/html/help.html?content=Filesystem_08.html">Workflow for reading and writing files</a>, <a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLLoader.html">URLLoader</a>, <a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLRequest.html">URLRequest</a>, <a href="http://livedocs.adobe.com/flex/3/html/help.html?content=data_access_2.html">Using HTTPService components</a><br /><a href="http://tush.wordpress.com/2007/07/20/actionscript-3-using-urlloader-to-send-and-load-server-variables/">Tushar Wadekar: ActionScript 3: Using URLLoader to send and load server variables</a><br /><a href="http://www.kirupa.com/forum/showthread.php?t=277069">Kirupa: String passed to URLVariables.decode() must be a URL-encoded query string...</a><br />StackOverflow: <a href="http://stackoverflow.com/questions/252915/how-to-send-array-throught-httpservice-in-adobe-flex-3">How to send array throught HTTPservice in Adobe Flex 3</a><br /><a href"http://groups.google.com/group/flex_india/browse_thread/thread/19d081e295905d28">Google Groups: Flex India Community: Flex to PHP variables array</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do You Populate a Flex Spark List With Information From an Array?]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/21/how-do-you-populate-flex-spark-list/"/>
    <updated>2011-01-21T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/21/how-do-you-populate-flex-spark-list</id>
    <content type="html"><![CDATA[<div class='post'>
First, you have to wrap the array up in a Collection class, and then you connect that Collection class to the Flex component.  Here's my understanding of how the three of these things relate to each other in general:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_SdPKamJbrgg/TToSbSYmLXI/AAAAAAAAAE4/qklhGy7hiRs/s1600/nuubu%2Bflex%2Bcomps.png" imageanchor="1" style="margin-left:1em; margin-right:1em"><img border="0" height="230" width="320" src="http://4.bp.blogspot.com/_SdPKamJbrgg/TToSbSYmLXI/AAAAAAAAAE4/qklhGy7hiRs/s320/nuubu%2Bflex%2Bcomps.png" /></a></div><br />In general, Collections also give you more functions to sort or filter arrays.  Also, if you alter the ArrayCollection -- by adding or removing an item -- you'll affect the underlying array.<br /><br />In code, this is something that would (in general) work to link a List component to an array:<br /><br /><pre class="brush:cpp">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br /><s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" <br />      xmlns:s="library://ns.adobe.com/flex/spark" <br />      xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"><br /><br /> <fx:Script><br />  &lt;![CDATA[<br />   import mx.collections.*;<br />   protected var array:Array;<br />   protected var arrayCollection:ArrayCollection = new ArrayCollection();<br /><br />   arrayCollection.source = array;<br />   list.dataProvider = arrayCollection;<br />  ]]&gt;<br /> </fx:Script><br /> <s:List x="642" y="183" id="list" height="200" width="100"></s:List><br /></s:Application><br /></pre><br /><br />Sources:<br /><a href="http://livedocs.adobe.com/flex/3/html/help.html?content=about_dataproviders_1.html">Adobe: Using Data Providers and Collections</a><br /><a href="http://livedocs.adobe.com/flex/3/html/help.html?content=dpcontrols_1.html#478370">Adobe: List control</a><br /><a href="http://blog.flexdevelopers.com/2009/03/flex-basics-arraycollection.html">Flex Developers & Development: ArrayCollection Basics</a><br /><a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/mx/collections/ArrayCollection.html">Adobe: ArrayCollection documentation</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flex/AS3: Errors With Stage and Event Listeners]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/14/flexas3-errors-with-stage-and-event/"/>
    <updated>2011-01-14T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/14/flexas3-errors-with-stage-and-event</id>
    <content type="html"><![CDATA[<div class='post'>
This is a continuation of myself attempting to find out how to <a href="http://nuubu.blogspot.com/2010/12/problem-how-do-i-use-flex-components-to.html">use Flex UI components with a previously created AS3 project</a>.<br /><br />And it works fine, except for this error which I get when running in debug mode:<br /><br /><code>TypeError: Error #1009: Cannot access a property or method of a null object reference.</code><br /><br />It turns out that this error refers to a part of the AS3 code which does something with this variable called the stage.  This stage variable was an instance of the <strong>Stage</strong> class, and it's made when the Flash Player starts.  SWF files are loaded into the stage container, and all of their objects that display are DisplayObjects, and are children of the stage.  All DisplayObject instances also have a <code>stage</code> property which references the stage that is displaying them.  <span class="shh">Also: Stage is a singleton class, meaning there's only one of them, and it can't be modified by lowly programmers, and is always at the top level of the display hierarchy within a Flash Player.</span><br /><br />Anyway, the error occurs (I think) because my parent (UI) application loads onto the stage before the embedded (AS3) application.  The AS3 app then tries to use the <code>stage</code> property before it's even on the stage.  The solution is to make sure that the embedded SWF is on the stage before you try instantiating or doing anything.<br /><br />To fix it, I essentially wrapped up offending code in an event listener which would wait until the stage was loaded to execute.  So, this code which lets the stage listen for keyboard input:<br /><br /><pre class="brush: cpp"><br />stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);<br /><br /></pre><br />became<br /><br /><pre class="brush: cpp"><br />addEventListener(Event.ADDED_TO_STAGE, function (e:Event):void {<br />  stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);<br />});<br /><br /></pre><br />Not sure if this is good style or not.<br /><br /><br />Sources:<br /><a href="http://www.kirupa.com/forum/showthread.php?p=2129548#post2129548">Kirupa: ActionScript 3 Tip of the Day</a><br /><a href="http://jaycsantos.com/flash/do-you-know-actionscript-as3-stage/">jaycsantos.com: Do you know ActionScript?  AS3 Stage</a><br /><a href="http://board.flashkit.com/board/showthread.php?t=792605">Flash Kit: TypeError: Error #1009</a></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Lewis R Strasburg</div>
<div class='content'>
Nice solution, it worked great for me.  I only needed to reference the stage at the very beginning for a &quot;Press Any Key to Start&quot; scenario, and it wasn&#39;t working until now.  Thanks!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem: How Do I Use Flex Components to Make UI for an ActionScript Project?]]></title>
    <link href="http://blog.neauro.com/blog/2010/12/30/problem-how-do-i-use-flex-components-to/"/>
    <updated>2010-12-30T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2010/12/30/problem-how-do-i-use-flex-components-to</id>
    <content type="html"><![CDATA[<div class='post'>
I've got an ActionScript project which already compiles into a SWF file of 600x400.  So how do I add UI (buttons, etc.) to this?  i.e. maybe import all the existing AS code into a Flex Project so I can use the fancy UI components?<br /><br />I near-immediately discovered the <strong>SWFLoader</strong>, which had a relatively promising name.  It's a control that apparently "lets you load one application into another application." You add the SWFLoader component, set its Source, and Flex will import the SWF file and run it.  SWFLoader can also load different types of images (jpg, png, etc.) but I think that the Image component is supposed to be better suited for that.<br /><br />Concerning design: an SWF that is loaded with an SWFLoader could be either a sub-application, or a module.  The difference is that a main application would load a sub-application, instead of embedding their functionality, which would mean a smaller initial download size and shorter load time for the main application.  This also means that you have better encapsulation of the functionality.<br /><br />In an application that is modular, the main application would load each form as a module using the <a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/mx/modules/ModuleManager.html">ModuleManager</a>, which maps URLs to modules, and dispatches events to communicate whether a module is in a loaded state or a not-yet-loaded state.<br /><br /><br /><strong>Loading a SWF file with SWFLoader</strong><br />So when I try putting the source of my SWFLoader as my other SWF file, I get some weird "Error #2032," like this:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_SdPKamJbrgg/TR1jdV0LkEI/AAAAAAAAACk/nLyrh6xlNUA/s1600/fb_swfloader.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="201" src="http://4.bp.blogspot.com/_SdPKamJbrgg/TR1jdV0LkEI/AAAAAAAAACk/nLyrh6xlNUA/s320/fb_swfloader.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">why. &nbsp;why are you there</td></tr></tbody></table><br />But when I actually tried running, the embedded SWF showed up, so.  Not sure what's going on there.  It seems that this is supposed to occur when the object is not found or null, but when I followed the link, I found the right (working) SWF...so. -shrug- Maybe it's because my filepath contains spaces?<br /><br /><br /><strong>Making a Flex application work with an embedded SWF</strong><br />To use the variables and functions in a SWF that's loaded in your application with a SWFLoader, you need to make sure of these things:<br /><ul><li>import <code>mx.managers.SystemManager</code></li><li>Make an instance of a SystemManager, i.e. something like <code>public var loadedSM:SystemManager</code></li><li>Make sure the SystemManger instance gets binded to the properties of the embedded SWF with an intializer function that contains a line like <code>loadedSM = SystemManager(<em>SWFLoaderID</em>.content)</code></li><li>Make sure that the <code>&lt;mx:SWFLoader&gt;</code> contains a <code>complete</code> property that will call the function that initializes the SystemManager</li></ul><br />That being said, here's a sample for a simple "application" (such a big word for such a silly thing), where clicking on the button changes the text in the Label component:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2GLhWNZUI/AAAAAAAAACw/RoAFu9Gm1z8/s1600/fb_swfloader2.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="227" src="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2GLhWNZUI/AAAAAAAAACw/RoAFu9Gm1z8/s320/fb_swfloader2.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">before clicking</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_SdPKamJbrgg/TR2GSzaMWgI/AAAAAAAAAC0/hw_Zfw0Cyb4/s1600/fb_swfloader2_2.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="215" src="http://4.bp.blogspot.com/_SdPKamJbrgg/TR2GSzaMWgI/AAAAAAAAAC0/hw_Zfw0Cyb4/s320/fb_swfloader2_2.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">after clicking</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"><br /></div><br /><em>Inner Application Code</em><br /><pre class="brush:js">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br /><s:application minheight="600" minwidth="955" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"><br /> <fx:script><br />  &lt;![CDATA[<br />   public function pressed():void <br />   {<br />    label.text = "Hi, embedded application!";<br />   }<br />  ]]&gt;<br /> </fx:script><br /><br /> <s:label fontfamily="Courier New" fontsize="30" id="label" text="I am a label." x="82" y="84"><br /> <s:button click="pressed()" label="Inner application button!!" x="261" y="196"><br /></s:button></s:label></s:application><br /></pre><br /><br />And here's code for an outer application, which has a button that will change the text of the embedded SWF's label:<br /><br /><em>Outer Application Code</em><br /><pre class="brush:js">&lt;?xml version="1.0" encoding="utf-8"?&gt;<br /><s:application minheight="600" minwidth="955" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"><br /> <fx:script><br />  &lt;![CDATA[<br />   import mx.managers.SystemManager;<br />   public var loadedSM:SystemManager;<br />   <br />   // initialize variables with information from the loaded application<br />   private function initNestedApplicationProperties():void<br />   {<br />    loadedSM = SystemManager(myLoader.content);<br />   }<br />   <br />   protected function useEmbeddedPressed():void<br />   {<br />    loadedSM.application["label"].text = "Hello, outer application!";<br />   }<br />  ]]&gt;<br /> </fx:script><br /> <mx:swfloader complete="initNestedApplicationProperties()" height="311" id="myLoader" source="file:/C:/Users/nadine/Adobe Flash Builder 4/HelloEmbeddedApp/bin-debug/HelloEmbeddedApp.swf" width="556" x="107" y="59"><br /> <s:button click="useEmbeddedPressed()" label="Outer application button!!" x="284" y="389"><br /></s:button></mx:swfloader></s:application><br /></pre><br />So, to reference the functions or variables of an embedded SWF, you'll want to preface variable/function names with <code>loadedSM.application["<em>variable/function name</em>"]</code>.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2KetBeoCI/AAAAAAAAAC4/Jfu10aS58LA/s1600/fb_swfloader3.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="242" src="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2KetBeoCI/AAAAAAAAAC4/Jfu10aS58LA/s320/fb_swfloader3.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">outer application, with the embedded SWF</td></tr></tbody></table><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2GJlHbhNI/AAAAAAAAACs/CI3P5tqVK54/s1600/fb_swfloader4.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="229" src="http://3.bp.blogspot.com/_SdPKamJbrgg/TR2GJlHbhNI/AAAAAAAAACs/CI3P5tqVK54/s320/fb_swfloader4.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">hurray!</td></tr></tbody></table><br /><br /><br /><strong>One last interesting note:</strong><br />When playing around with this, my initial <code>useEmbeddedAlert</code> function looked like this:<br /><pre class="brush: js">protected function useEmbeddedAlert():void<br />{<br />    Alert.show("test alert");<br />    loadedSM.application["alert"]();<br />}<br /></pre>The idea was that clicking a button on the outer application would sent an alert, then call on the inner application's function to make an alert.  Even so, when I clicked the button on the outer application, I would see the inner application function's alert before I saw the "test alert" message.  More to think about later, I guess.<br /><br />(Incidentally, that last bit also shows an example of how to call a function from the SWF loaded in an SWFLoader.)<br /><br /><br /><span class="sig">Update</span><br />So I guess there's a much easier way to interact with a SWF inside a SWFLoader, and it goes like this:<br /><br /><ul><li>Give your SWFLoader an id, like <code>loaderID</code></li><li>Interact with it by using <code>loaderID.content</code></li></ul><br />So, to call a function, you could write something like <code>loaderID.content["function"](args)</code>.<br /><br /><span class="shh">Huh.</span><br /><br />Sources:<br /><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf619ab-7ff0.html">Adobe: Loading applications with the SWFLoader control</a><br /><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7f0b.html">Adobe: Creating and loading sub-applications</a><br /><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7f9c.html">Adobe: SWFLoader control</a><br /><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7eec.html">Adobe: Listening for mouse events with loaded applications</a><br /><a href="http://www.bigresource.com/FLASH-SWFLoader-ioError-file-name--0q7ZSQf3Q7.html">BigResource thing</a><br /><a href="http://stackoverflow.com/questions/1091342/interact-with-swf-loader">Stackoverflow: Interact with SWF Loader</a></div>

]]></content>
  </entry>
  
</feed>
