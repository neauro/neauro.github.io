<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | liwanag]]></title>
  <link href="http://blog.neauro.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://blog.neauro.com/"/>
  <updated>2014-01-16T19:43:58-08:00</updated>
  <id>http://blog.neauro.com/</id>
  <author>
    <name><![CDATA[nadine a.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Q&a] Standard Annotation Language (SAL)]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/16/q-standard-annotation-language-sal/"/>
    <updated>2011-01-16T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/16/q-standard-annotation-language-sal</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="sig">What does <code>__inout</code>, etc. mean?</span><br />For OS I'm plumbing the depths of a Windows kernel and keep running into these things in the code that look like <code>__in</code>, or <code>__out</code>, or even <code>__inout</code>...for example:<br /><br /><pre class="brush:xml">NTKERNELAPI<br />VOID<br />FASTCALL<br />ExAcquireFastMutexUnsafe (<br />    __inout PFAST_MUTEX FastMutex<br />    );<br /></pre><br />I initially found <a href="http://nuubu.blogspot.com/2011/01/q-operating-systems-etc.html">something</a> about the usage of <code>_</code> and <code>__</code> in code, and it turns out that <code>__</code> is just an annotation which will help programmers know more about the intended usage of the code, like comments, and are ignored by the compiler.  <code>__inout</code> stuff is no different.<br /><br />These annotations are part of Microsoft's SAL, or, Standard Annotation Language, and define the proper use of buffers, which are regions of data that have been allocated and are represented as pointers.  If a pointer is pointing to a buffer, there's no good way to know how big a buffer is in compile time; with usage of SAL, you can make explicit exactly how big a buffer is.  It also helps to show how a function uses its parameters -- what it thinks that the parameter is, and what it will do with that parameter when it finishes.<br /><br />This is relevant because in C, a function can take a value or a pointer as an argument.  Arguments can be used as input (i.e. taking values to add together), or as output (i.e. taking a pointer to something which will store your output value.) But, if you were to leave out these annotations, you wouldn't know if an argument a function takes is supposed to be used as function input or output.<br /><br /><code>__in</code>, <code>__out</code>, and <code>__inout</code> are all examples of "Usage" annotations.<br /><br />So, if you see something like<br /><br /><pre class="brush: xml">void * memset(<br /> __out_bcount(s) char *p,<br /> __in int v, <br /> __in size_t s);<br /></pre><br />This means that the function <code>memset</code> expects variables <code>int v</code> and <code>size_t s</code> to be valid when the function is called (also called "valid on input").  Also, the buffer <code>char *p</code> will be initialized by this function, will be written to by this function, and will be valid when the function returns.<br /><br />In simpler terms -- <code>v</code> and <code>s</code> are definitely meant to be <code>memset</code>'s input, and <code>p</code> is meant to be the output.<br /><br /><br />Sources:<br /><a href="http://207.46.16.248/en-us/library/ff550230%28VS.85%29.aspx">MSDN: Overview of Annotations for Drivers</a><br /><a href="http://msdn.microsoft.com/en-us/library/ms235402%28v=vs.80%29.aspx">MSDN: SAL Annotations</a><br /><a href="http://blogs.msdn.com/b/michael_howard/archive/2006/05/19/602077.aspx">MSDN: A Brief Introduction to the Standard Annotation Language</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C: Typedef, Struct, Extern]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/09/c-typedef-struct/"/>
    <updated>2011-01-09T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/09/c-typedef-struct</id>
    <content type="html"><![CDATA[<div class='post'>
<span class="sig">What is <code>typedef</code> and <code>struct</code>?</span><br />A struct in C is a structured type that combines a set of labeled objects of different types, into a single object.  So, kind of like a Java object with its own variables.<br /><br />An example of a struct you could make would be<br /><br /><pre class="brush: cpp">struct pokemon {<br />   char* nickname;<br />   char* species;<br />   int level;<br />   char* item;<br />};<br /></pre><br />Then, to create a new Pokemon struct, I could say<br /><br /><pre class="brush: cpp">struct Pokemon pikachu;<br /></pre><br />And to access the new struct's nickname, I could say something like<br /><br /><pre class="brush: cpp">pikachu.nickname;<br /></pre><br />The keyword <code>typedef</code> is just meant so that you can assign different "names" to existing types, in case you may get confused.  For instance, you might have code that looks like<br /><br /><pre class="brush: cpp">char* pokemon_name;<br />char* item;<br /><br />void buy(char* item) {<br />   // remove money from the user<br />}<br /></pre><br />Though <code>buy</code> can take any char*, what you really want it to do is only accept char* that represent items, not Pokemon nicknames.  So, you can use typedef to distinguish that pokemon_name and item are completely unrelated variables which happen to both be of type char*.<br /><br /><pre class="brush: cpp">typedef char* pokemon_name;<br />typedef char* item;<br /><br />pokemon_name pokemon_nickname;<br />item item_name;<br /><br />void buy(char* item) {<br />   // remove money from the user<br />}<br /></pre><br />This distinction is only for the programmer; the C/C++ compiler considers both things to be char*, and won't give any errors if you happen to try and purchase a Pokemon.  <span class="shh">You cheat.</span><br /><br /><code>typedef</code> can also make declarations easier; for instance, if I did something like<br /><br /><pre class="brush:cpp">typedef struct Pokemon {<br />   char* nickname;<br />   char* species;<br />   int level;<br />   char* item;<br />} Pokemon;<br /></pre><br />Then, instead of having to write <code>struct Pokemon pikachu;</code> like earlier, I could make a new Pokemon just by saying<br /><br /><pre class="brush: cpp">Pokemon pikachu;<br /></pre><br /><br /><span class="sig">What does <code>extern</code> mean?</span><br />The <code>extern</code> declaration indicates the existence of, and type of, a global variable or function.  <code>extern</code> means that something is defined externally to the current module (so if your current .c file is using it, that means that another, included file actually defined it?).  <code>extern</code> can be left off because the linker collapses the multiple definitions into a single one, but to use the <code>extern</code> keyword is cleaner because it defines the global variable in one place, and everything else makes <code>extern</code> references to it.  <br /><br />If a program has a variable that's declared as <code>extern</code>, the program won't reserve any memory for the variable in the scope that it was declared.  Which is why you need to use the <code>extern</code> keyword in programs that are using the declaration, but haven't defined it.<br /><br /><br /><br />Source:<br /><a href="http://en.wikipedia.org/wiki/Struct_%28C_programming_language%29">Wikipedia: Struct (C programming language)</a><br /><a href="http://wiki.answers.com/Q/What_is_the_use_of_extern_in_C">Answers.com: What is the use of extern in C</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Q&a] Operating Systems, C, Etc.]]></title>
    <link href="http://blog.neauro.com/blog/2011/01/06/q-operating-systems-etc/"/>
    <updated>2011-01-06T00:00:00-08:00</updated>
    <id>http://blog.neauro.com/blog/2011/01/06/q-operating-systems-etc</id>
    <content type="html"><![CDATA[<div class='post'>
<b>How do you switch drives with Windows command line?</b><br />If you want to go to drive <code>Z:</code>, rather than <code>cd Z:</code>, you can just type <code>Z:</code>.<br /><br /><br /><b>What do you do when you demux something?</b><br />A demultiplexer is a device that takes a single input signal and routes it to one of many output lines.  It's often used with a multiplexer on the sending end.  So, when you demux a signal, you accept it, and then based on some parameter send it to a different function or something. <span class="shh">I think?</span><br /><br /><br /><b>What's a virtual machine?</b><br />"A software implementation of a programmable machine" -- so, a simulation of a computer, on a computer.<br /><br /><br /><b>What's the difference between a function in C and a method in Java?</b><br />All C/C++ programs require a function named <code>main</code> and besides that can have numerous other functions.  In Java, functions can't stand by themselves -- they have to be part of a class.  Functions that are part of a class are usually called methods.<br /><br />Also, it seems that methods are called by reference values, which are objects, perhaps like <code>Object.method()</code>, as opposed to just <code>value = function()</code>?  Also, "method" is used more often in Java, most likely because Java has objects and C/C++ does not.<br /><br /><br /><b>What's Windows NT?</b><br />It's a family of operating systems created by Microsoft, which were meant to complement consumer versions of Windows that were based on MS-DOS.  NT was the first fully 32-bit version of Windows.  Windows 2000, Windows XP, Windows Server 2003, Windows Vista, Windows 7, etc., are based on Windows NT, though they aren't branded the same way.  NT was once expanded to mean "New Technology" and stood originally for "N-Ten," the codename of the Intell i860 XR processor that the OS was originally developed for, but NT has no particular meaning anymore.  Sidenote: it is really confusing that there's an operating system called Windows <i>Server</i> 2003.  <i>Wat.</i>  I guess this calls into question what exactly a server is supposed to be.<br /><br /><br /><b>What is a server?</b><br />A server can refer to:<br /><ul><li>a computer program running as <a href="http://nuubu.blogspot.com/2011/01/intro-to-distributed-systems.html">a service</a>, to serve the needs or requests of other programs</li><li>a physical computer running one or more such services, to serve the needs of programs running on other computers in the same network</li><li>a software/hardware system such as a database server, file server, mail server, print server</li></ul>I guess server operating systems are operating systems that have certain features which make them good servers -- such as limited GUI, flexible/advanced networking capability, tight security, backup securities, transparent data transfer between different volumes or devices -- and maybe that's what the Windows Server operating systems are all about.<br /><br /><br /><b>How do you press Ctrl+Alt+Delete in a virtual machine?</b><br />In a virtual machine in MS Virtual PC 2007, rather than pressing the keys, go to the <code>Action</code> tab and select <code>Ctrl+Alt+Delete</code>.<br /><br /><br /><b>What does the <code>_</code> or <code>__</code> mean in C programs?</b><br />There's no particular meaning.  <code>_</code> is meant to identify system variables/functions, <code>__</code> is meant to identify metadata.  Additionally, when you include headers in C, you <br />add in a lot of code and functions and variables; to prevent these imported names from causing duplicates with the variables/names of your own stuff, it's best to avoid using variables/functions which start with underscores in your own program.<br /><br /><br /><br /><br />Source:<br />Jimmy<br />Wikipedia: <a href="http://en.wikipedia.org/wiki/Multiplexer">1</a>, <a href="http://en.wikipedia.org/wiki/Virtual_machine">2</a>, <a href="http://en.wikipedia.org/wiki/Windows_NT">3</a>, <a href="http://en.wikipedia.org/wiki/Server_%28computing%29">4</a><br /><a href="http://www.geekinterview.com/question_details/31163">GeekInterview: What is the difference between methods and functions?</a><br /><a href="http://www.dickbaldwin.com/java/Java008.htm">Dick Baldwin: Similarities and Differences between Java and C++</a><br /><a href="http://bytes.com/topic/c/answers/540408-_-__-significance">Bytes: _ and __ significance</a></div>

]]></content>
  </entry>
  
</feed>
